{"noir_version":"0.38.0+e784523a15c0c233a5a794f28498635b7ce86325","hash":16068659706365848900,"abi":{"parameters":[{"name":"partial_data","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":640,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"partial_hash","type":{"kind":"array","length":8,"type":{"kind":"integer","sign":"unsigned","width":32}},"visibility":"private"},{"name":"full_data_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"b64_offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"pubkey_modulus_limbs","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"public"},{"name":"redc_params_limbs","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"signature_limbs","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"domain","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":50,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"public"},{"name":"nonce","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"public"}],"return_type":null,"error_types":{"5460150517075275239":{"error_kind":"fmtstring","length":129,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32}]},"9464310096042814896":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"integer","sign":"unsigned","width":8},{"kind":"integer","sign":"unsigned","width":32}]},"12201960142877261160":{"error_kind":"fmtstring","length":123,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32}]}}},"bytecode":"","debug_symbols":"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JXy367LbVBlfXcko7DZVxlcXIQu9TZXw3a5Lb1MlfLfr0ttUCd/tuvQ2VcJ3b1Ox21QZ3+267DZVxne7Lr1NlfDdrktvUyV89zYVvU2V8N2uy25TZXx3JYPdpsr46iJkobepEr7adSu9TZXw1a5b6W2qhK923RfOja/epqrsNlXGV7tuZbepMr7adSu9TZXw1a5b6W2qhK/epqr0NlXCV7tuZbepMr66klHZbaqMry5CVnqbKuG7XZfepkr4btelt6kSvtt16W2qhK/epqrsNlXGd7suu02V8d2uS29TJXy369LbVAlfvU1V6W2qhO92XXabKuOrKxmV3abK+OoiZKW3qRK+23XpbaqE73Zdepsq4btdl96mSvjubSp2myrju12X3abK+G7XpbepEr7bdeltqoTv3qait6kSvtt12W2qjK+uZFR2myrjq4uQld6mSvhu16W3qRK+23XpbaqE73Zdepsq4bu3qdhtqozvdl12myrju12X3qZK+G7XpbepEr57m4repkr4btdlt6kyvrqSUdltqoyvLkJWepsq4btdl96mSvhu16W3qRK+23XpbaqE796mYrepMr7bddltqozvdl16myrhq1230dtUCV+9TdXobaqEr3bd9qBf3YyvrmQ0dpsq46uLkI3epkr4atdt9DZVwle7bqO3qRK+2nUbvU2V8NXbVI3dpsr4atdt7DZVxne7Lr1NlfDdrktvUyV89TZVo7epEr7bddltqoyvrmQ0dpsq46uLkI3epkr4btelt6kSvtt16W2qhO92XXqbKuGrt6kau02V8d2uy25TZXy369LbVAnf7br0NlXCV29TNXqbKuG7XZfdpsr46kpGY7epMr66CNnobaqE73Zdepsq4btdl96mSvhu16W3qRK+e5uK3abK+G7XZbepMr7bdeltqoTvdl16myrhu7ep6G2qhO92XXabKuOrKxmN3abK+OoiZKO3qRK+23XpbaqE73Zdepsq4btdl96mSvjubSp2myrju12X3abK+G7XpbepEr7bdeltqoTv3qait6kSvtt12W2qjO+uZLDbVBlfXYRs9DZVwne7Lr1NlfDVrtvpbaqEr3bdTm9TJXz1NlV/0K9uxle7bme3qTK+2nU7vU2V8NWu2+ltqoSv3qbq9DZVwle7bme3qTK+upLR2W2qjK8uQnZ6myrhu12X3qZK+G7XpbepEr7bdeltqoSv3qbq7DZVxne7LrtNlfHdrktvUyV8t+vS21QJX71N1eltqoTvdl12myrjqysZnd2myvjqImSnt6kSvtt16W2qhO92XXqbKuG7XZfepkr46m2qzm5TZXy367LbVBnf7br0NlXCd7suvU2V8N3bVPQ2VcJ3uy67TZXx1ZWMzm5TZXx1EbLT21QJ3+269DZVwne7Lr1NlfDdrktvUyV89zYVu02V8d2uy25TZXy369LbVAnf7br0NlXCd29T0dtUCd/tuuw2VcZXVzI6u02V8dVFyE5vUyV8t+vS21QJ3+269DZVwne7Lr1NlfDd21TsNlXGd7suu02V8d2uS29TJXy369LbVAlfvU016G2qhK923cFuU2V8dSVjPOhXN+Ori5CD3qZK+GrXHfQ2VcJXu+6gt6kSvtp1B71NlfDV21SD3abK+GrXHew2VcZXu+6gt6kSvtt16W2qhK/ephr0NlXCd7suu02V8dWVjMFuU2V8dRFy0NtUCd/tuvQ2VcJ3uy69TZXw3a5Lb1MlfPU21WC3qTK+23XZbaqM73Zdepsq4btdl96mSvjqbapBb1MlfLfrsttUGV9dyRjsNlXGVxchB71NlfDdrktvUyV8t+vS21QJ3+269DZVwndvU7HbVBnf7brsNlXGd7suvU2V8N2uS29TJXz3NhW9TZXw3a7LblNlfHUlY7DbVBlfXYQc9DZVwne7Lr1NlfDdrktvUyV8t+vS21QJ371NxW5TZXy367LbVBnf7br0NlXCd7suvU2V8N3bVPQ2VcJ3uy67TZXx3ZUMdpsq46uLkIPepkr4btelt6kSvtt16W2qhK923UlvUyV89TbVZLepMr7adecDf3UTvtp1J71NlfDVrjvpbaqEr96mmvQ2VcJXu+5kt6kyvrqSMdltqoyvLkJOepsq4atdd9LbVAnf7br0NlXCd7suvU2V8NXbVJPdpsr4btdlt6kyvtt16W2qhO92XXqbKuGrt6kmvU2V8N2uy25TZXx1JWOy21QZX12EnPQ2VcJ3uy69TZXw3a5Lb1MlfLfr0ttUCV+9TTXZbaqM73Zddpsq47tdl96mSvhu16W3qRK+e5uK3qZK+G7XZbepMr66kjHZbaqMry5CTnqbKuG7XZfepkr4btelt6kSvtt16W2qhO/epmK3qTK+23XZbaqM73Zdepsq4btdl96mSvjubSp6myrhu12X3abK+OpKxmS3qTK+ugg56W2qhO92XXqbKuG7XZfepkr4btelt6kSvnubit2myvhu12W3qTK+23XpbaqE73Zdepsq4bu3qehtqoSvdt3FblNlfHUlY7HbVBlfXYRcD/zVTfhq1130NlXCV7vuorepEr7adRe9TZXw1dtUi92myvhq113sNlXGV7vuorepEr7adRe9TZXw1dtUi96mSvhu12W3qTK+upKx2G2qjK8uQi56myrhu12X3qZK+G7XpbepEr7bdeltqoSv3qZa7DZVxne7LrtNlfHdrktvUyV8t+vS21QJX71NtehtqoTvdl12myrjqysZi92myvjqIuSit6kSvtt16W2qhO92XXqbKuG7XZfepkr47m0qdpsq47tdl92myvhu16W3qRK+23XpbaqE796morepEr7bddltqoyvrmQsdpsq46uLkIvepkr4btelt6kSvtt16W2qhO92XXqbKuG7t6nYbaqM73Zddpsq47tdl96mSvhu16W3qRK+e5uK3qZK+G7XZbepMr67ksFuU2V8dRFy0dtUCd/tuvQ2VcJ3uy69TZXw3a5Lb1MlfPU21Wa3qTK+2nU3u02V8dWuux/4q5vw1a676W2qhK/eptr0NlXCV7vuZrepMr66krHZbaqMry5CbnqbKuGrXXfT21QJX+26m96mSvhu16W3qRK+eptqs9tUGd/tuuw2VcZ3uy69TZXw3a5Lb1MlfPU21aa3qRK+23XZbaqMr65kbHabKuOri5Cb3qZK+G7XpbepEr7bdeltqoTvdl16myrhq7epNrtNlfHdrstuU2V8t+vS21QJ3+269DZVwndvU9HbVAnf7brsNlXGV1cyNrtNlfHVRchNb1MlfLfr0ttUCd/tuvQ2VcJ3uy69TZXw3dtU7DZVxne7LrtNlfHdrktvUyV8t+vS21QJ371NRW9TJXy367LbVBlfXcnY7DZVxlcXITe9TZXw3a5Lb1MlfLfr0ttUCd/tuvQ2VcJ3b1Ox21QZ3+267DZVxne7Lr1NlfDdrktvUyV89zYVvU2V8N2uy25TZXx1JeOw21QZX12EPPQ2VcJXu+554K9uwle77qG3qRK+2nUPvU2V8NXbVIfdpsr4atc97DZVxle77qG3qRK+2nUPvU2V8NXbVIfepkr4btdlt6kyvrqScdhtqoyvLkIeepsq4btdl96mSvhu16W3qRK+23XpbaqEr96mOuw2VcZ3uy67TZXx3a5Lb1MlfLfr0ttUCV+9TXXobaqE73Zddpsq46srGYfdpsr46iLkobepEr7bdeltqoTvdl16myrhu12X3qZK+O5tKnabKuO7XZfdpsr4btelt6kSvtt16W2qhO/epqK3qRK+23XZbaqMr65kHHabKuOri5CH3qZK+G7XpbepEr7bdeltqoTvdl16myrhu7ep2G2qjO92XXabKuO7XZfepkr4btelt6kSvnubit6mSvhu12W3qTK+upJx2G2qjK8uQh56myrhu12X3qZK+G7XpbepEr7bdeltqoTv3qZit6kyvtl168NuU2V8s+u++GbXffHNrvviw1/dhG/epnrxzdtUL77ZdV98s+u++OZKxvtr5krG+2vmIuSLby5C/vr/iPgb5hcf/uomfLPrvvhm133xza774ptd98U3b1PVh92myvhu12W3qTK+23XpbaqE73Zdepsq4Zu3qV588zbVi+92XXabKuObKxm/MN345iLk+9vwVzfhu12X3qZK+G7XpbepEr7bdeltqoRv3qb6xebGd7suu02V8d2uS29TJXy369LbVAnfvU1Fb1MlfLfrsttUGd9cyXjx0a9uxjcXIV98cxHyxXe7Lr1NlfDdrktvUyV8t+vS21QJ371NxW5TZXy367LbVBnf7br0NlXCd7suvU2V8N3bVPQ2VcJ3uy67TZXxzZWMF99cyXjxzUXIF99chHzx3a5Lb1MlfLfr0ttUCd/tuvQ2VcJ3b1Ox21QZ3+267DZVxne7Lr1NlfDdrktvUyV89zYVvU2V8N2uy25TZXx3JYPdpsr45iJkLfQ2VcJXu26ht6kSvtp1ywN/dRO+2nULvU2V8NXbVIXdpsr4atct7DZVxle7bqG3qRK+2nULvU2V8NXbVIXepkr4atct7DZVxldXMgq7TZXx1UXIQm9TJXy369LbVAnf7br0NlXCd7suvU2V8NXbVIXdpsr4btdlt6kyvtt16W2qhO92XXqbKuGrt6kKvU2V8N2uy25TZXx1JaOw21QZX12ELPQ2VcJ3uy69TZXw3a5Lb1MlfLfr0ttUCd+9TcVuU2V8t+uy21QZ3+269DZVwne7Lr1NlfDd21T0NlXCd7suu02V8dWVjMJuU2V8dRGy0NtUCd/tuvQ2VcJ3uy69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wne7Lr1NlfDd21T0NlXCd7suu02V8d2VDHabKuOri5CF3qZK+G7XpbepEr7bdeltqoSvdt1Kb1MlfPU2VWW3qTK+2nVfODe+2nUrvU2V8NWuW+ltqoSv3qaq9DZVwle7bmW3qTK+upJR2W2qjK8uQlZ6myrhq1230ttUCd/tuvQ2VcJ3uy69TZXw1dtUld2myvhu12W3qTK+23XpbaqE73Zdepsq4au3qSq9TZXw3a7LblNlfHUlo7LbVBlfXYSs9DZVwne7Lr1NlfDdrktvUyV8t+vS21QJX71NVdltqozvdl12myrju12X3qZK+G7XpbepEr57m4repkr4btdlt6kyvrqSUdltqoyvLkJWepsq4btdl96mSvhu16W3qRK+23XpbaqE796mYrepMr7bddltqozvdl16myrhu12X3qZK+O5tKnqbKuG7XZfdpsr46kpGZbepMr66CFnpbaqE73Zdepsq4btdl96mSvhu16W3qRK+e5uK3abK+G7XZbepMr7bdeltqoTvdl16myrhu7ep6G2qhK923cZuU2V8dSWjsdtUGV9dhGwP/NVN+GrXbfQ2VcJXu26jt6kSvtp1G71NlfDV21SN3abK+GrXbew2VcZXu26jt6kSvtp1G71NlfDV21SN3qZK+G7XZbepMr66ktHYbaqMry5CNnqbKuG7XZfepkr4btelt6kSvtt16W2qhK/epmrsNlXGd7suu02V8d2uS29TJXy369LbVAlfvU3V6G2qhO92XXabKuOrKxmN3abK+OoiZKO3qRK+23XpbaqE73Zdepsq4btdl96mSvjubSp2myrju12X3abK+G7XpbepEr7bdeltqoTv3qait6kSvtt12W2qjK+uZDR2myrjq4uQjd6mSvhu16W3qRK+23XpbaqE73Zdepsq4bu3qdhtqozvdl12myrju12X3qZK+G7XpbepEr57m4repkr4btdlt6kyvruSwW5TZXx1EbLR21QJ3+269DZVwne7Lr1NlfDdrktvUyV89TZVZ7epMr7adTu7TZXx1a7bH/irm/DVrtvpbaqEr96m6vQ2VcJXu25nt6kyvrqS0dltqoyvLkJ2epsq4atdt9PbVAlf7bqd3qZK+G7XpbepEr56m6qz21QZ3+267DZVxne7Lr1NlfDdrktvUyV89TZVp7epEr7bddltqoyvrmR0dpsq46uLkJ3epkr4btelt6kSvtt16W2qhO92XXqbKuGrt6k6u02V8d2uy25TZXy369LbVAnf7br0NlXCd29T0dtUCd/tuuw2VcZXVzI6u02V8dVFyE5vUyV8t+vS21QJ3+269DZVwne7Lr1NlfDd21TsNlXGd7suu02V8d2uS29TJXy369LbVAnfvU1Fb1MlfLfrsttUGV9dyejsNlXGVxchO71NlfDdrktvUyV8t+vS21QJ3+269DZVwndvU7HbVBnf7brsNlXGd7suvU2V8N2uS29TJXz3NhW9TZXw3a7LblNlfHUlY7DbVBlfXYQc9DZVwle77njgr27CV7vuoLepEr7adQe9TZXw1dtUg92myvhq1x3sNlXGV7vuoLepEr7adQe9TZXw1dtUg96mSvhu12W3qTK+upIx2G2qjK8uQg56myrhu12X3qZK+G7XpbepEr7bdeltqoSv3qYa7DZVxne7LrtNlfHdrktvUyV8t+vS21QJX71NNehtqoTvdl12myrjqysZg92myvjqIuSgt6kSvtt16W2qhO92XXqbKuG7XZfepkr47m0qdpsq47tdl92myvhu16W3qRK+23XpbaqE796morepEr7bddltqoyvrmQMdpsq46uLkIPepkr4btelt6kSvtt16W2qhO92XXqbKuG7t6nYbaqM73Zddpsq47tdl96mSvhu16W3qRK+e5uK3qZK+G7XZbepMr66kjHYbaqMry5CDnqbKuG7XZfepkr4btelt6kSvtt16W2qhO/epmK3qTK+2nUnu02V8dWuO+ltqoSvdt35wF/dhK/eppr0NlXCV7vuZLepMr66kjHZbaqMry5CTnqbKuGrXXfS21QJX+26k96mSvhq1530NlXCV29TTXabKuO7XZfdpsr4btelt6kSvtt16W2qhK/eppr0NlXCd7suu02V8dWVjMluU2V8dRFy0ttUCd/tuvQ2VcJ3uy69TZXw3a5Lb1MlfPU21WS3qTK+23XZbaqM73Zdepsq4btdl96mSvjubSp6myrhu12X3abK+OpKxmS3qTK+ugg56W2qhO92XXqbKuG7XZfepkr4btelt6kSvnubit2myvhu12W3qTK+23XpbaqE73Zdepsq4bu3qehtqoTvdl12myrjqysZk92myvjqIuSkt6kSvtt16W2qhO92XXqbKuG7XZfepkr47m0qdpsq47tdl92myvhu16W3qRK+23XpbaqE796morepEr7bddltqozvrmSw21QZX12EXPQ2VcJXu+6it6kSvtp11wN/dRO+2nUXvU2V8NXbVIvdpsr4atdd7DZVxle77qK3qRK+2nUXvU2V8NXbVIvepkr4atdd7DZVxldXMha7TZXx1UXIRW9TJXy369LbVAnf7br0NlXCd7suvU2V8NXbVIvdpsr4btdlt6kyvtt16W2qhO92XXqbKuGrt6kWvU2V8N2uy25TZXx1JWOx21QZX12EXPQ2VcJ3uy69TZXw3a5Lb1MlfLfr0ttUCd+9TcVuU2V8t+uy21QZ3+269DZVwne7Lr1NlfDd21T0NlXCd7suu02V8dWVjMVuU2V8dRFy0dtUCd/tuvQ2VcJ3uy69TZXw3a5Lb1MlfPc2FbtNlfHdrstuU2V8t+vS21QJ3+269DZVwndvU9HbVAnf7brsNlXGV1cyFrtNlfHVRchFb1MlfLfr0ttUCd/tuvQ2VcJ3uy69TZXw3dtU7DZVxne7LrtNlfHVrrvpbaqEr3bdTW9TJXz1NtV+4K9uwle77ma3qTK+upKx2W2qjK8uQm56myrhq11309tUCV/tupvepkr4atfd9DZVwldvU212myrju12X3abK+G7XpbepEr7bdeltqoSv3qba9DZVwne7LrtNlfHVlYzNblNlfHURctPbVAnf7br0NlXCd7suvU2V8N2uS29TJXz1NtVmt6kyvtt12W2qjO92XXqbKuG7XZfepkr46m2qTW9TJXy367LbVBlfXcnY7DZVxlcXITe9TZXw3a5Lb1MlfLfr0ttUCd/tuvQ2VcJ3b1Ox21QZ3+267DZVxne7Lr1NlfDdrktvUyV89zYVvU2V8N2uy25TZXx1JWOz21QZX12E3PQ2VcJ3uy69TZXw3a5Lb1MlfLfr0ttUCd+9TcVuU2V8t+uy21QZ3+269DZVwne7Lr1NlfDd21T0NlXCd7suu02V8d2VDHabKuOri5Cb3qZK+GrXPfQ2VcJXu+6ht6kSvtp1z4N+dTO+epvqsNtUGV/tuofdpsr4atc99DZVwle77qG3qRK+epvq0NtUCV/tuofdpsr46krGYbepMr66CHnobaqE73Zdepsq4btdl96mSvhu16W3qRK+epvqsNtUGd/tuuw2VcZ3uy69TZXw3a5Lb1MlfPU21aG3qRK+23XZbaqMr65kHHabKuOri5CH3qZK+G7XpbepEr7bdeltqoTvdl16myrhu7ep2G2qjO92XXabKuO7XZfepkr4btelt6kSvnubit6mSvhu12W3qTK+upJx2G2qjK8uQh56myrhu12X3qZK+G7XpbepEr7bdeltqoTv3qZit6kyvtt12W2qjO92XXqbKuG7XZfepkr47m0qepsq4btdl92myvjqSsZht6kyvroIeehtqoTvdl16myrhu12X3qZK+G7XpbepEr57m4rdpsr4btdlt6kyvtt16W2qhG923f7Q21QJ37xN9eKbt6lefLPrvvjoVzfjmysZL765kvHim4uQL765CPnim123P/Q2VcI3u+6Lb3bdF9/sui8++tXN+OZtqhffvE314ptd98U3u+6L73Zdepsq4btdl96mSvjmbaoXH/7qJny367LbVBnfXMl48c2VjBffXITsD71NlfDdrktvUyV8t+vS21QJ3+269DZVwjdvU7345m2qF9/tuuw2VcZ3uy69TZXw3a5Lb1MlfPM21Ytv3qZ68d2uy25TZXxzJaM/7DZVxjcXIV98cxHyxXe7Lr1NlfDdrktvUyV8t+vS21QJ371NxW5TZXy367LbVBnf7br0NlXCd7suvU2V8N3bVPQ2VcJ3uy67TZXxzZWMF99cyXjxzUXIFx/+6iZ8t+vS21QJ3+269DZVwne7Lr1NlfDd21TsNlXGd7suu02V8d2uS29TJXy369LbVAnfvU1Fb1MlfLfrsttUGd9dyWC3qTK+uQj54puLkC++23XpbaqEr3bdQm9TJXy16xZ6myrhq7epyoN+dTO+2nULu02V8dWuW+htqoSvdt1Cb1MlfPU2VaG3qRK+2nULu02V8dWVjMJuU2V8dRGy0NtUCd/tuvQ2VcJ3uy69TZXw3a5Lb1MlfPU2VWG3qTK+23XZbaqM73Zdepsq4btdl96mSvjqbapCb1MlfLfrsttUGV9dySjsNlXGVxchC71NlfDdrktvUyV8t+vS21QJ3+269DZVwldvUxV2myrju12X3abK+G7XpbepEr7bdeltqoTv3qait6kSvtt12W2qjK+uZBR2myrjq4uQhd6mSvhu16W3qRK+23XpbaqE73Zdepsq4bu3qdhtqozvdl12myrju12X3qZK+G7XpbepEr57m4repkr4btdlt6kyvrqSUdhtqoyvLkIWepsq4btdl96mSvhu16W3qRK+23XpbaqE796mYrepMr7bddltqozvdl16myrhu12X3qZK+OptqkpvUyV8tetWdpsq46srGS+cG19dhKz0NlXCV7tupbepEr7adSu9TZXw1a5b6W2qhK/epqrsNlXGV7tuZbepMr7adSu9TZXw3a5Lb1MlfPU2VaW3qRK+23XZbaqMr65kVHabKuOri5CV3qZK+G7XpbepEr7bdeltqoTvdl16myrhq7epKrtNlfHdrstuU2V8t+vS21QJ3+269DZVwldvU1V6myrhu12X3abK+OpKRmW3qTK+ughZ6W2qhO92XXqbKuG7XZfepkr4btelt6kSvnubit2myvhu12W3qTK+23XpbaqE73Zdepsq4bu3qehtqoTvdl12myrjqysZld2myvjqImSlt6kSvtt16W2qhO92XXqbKuG7XZfepkr47m0qdpsq47tdl92myvhu16W3qRK+23XpbaqE796morepEr7bddltqozvrmSw21QZX12ErPQ2VcJ3uy69TZXw3a5Lb1MlfLXrNnqbKuGrt6kau02V8dWu2x74q5vw1a7b6G2qhK923UZvUyV89TZVo7epEr7adRu7TZXx1ZWMxm5TZXx1EbLR21QJX+26jd6mSvhu16W3qRK+23XpbaqEr96mauw2VcZ3uy67TZXx3a5Lb1MlfLfr0ttUCV+9TdXobaqE73Zddpsq46srGY3dpsr46iJko7epEr7bdeltqoTvdl16myrhu12X3qZK+OptqsZuU2V8t+uy21QZ3+269DZVwne7Lr1NlfDd21T0NlXCd7suu02V8dWVjMZuU2V8dRGy0dtUCd/tuvQ2VcJ3uy69TZXw3a5Lb1MlfPc2FbtNlfHdrstuU2V8t+vS21QJ3+269DZVwndvU9HbVAnf7brsNlXGV1cyGrtNlfHVRchGb1MlfLfr0ttUCd/tuvQ2VcJ3uy69TZXw3dtU7DZVxne7LrtNlfHdrktvUyV8t+vS21QJ371NRW9TJXz1T5g7vU2V8NWvbqe3qRK++tXtj/rV7V9vU83+/Mafc34AmjSgRQPaNKBvv17rGb+BVj3hr8D48/dl9P5X+K8Xnn4Uvpjhqxm+meG7GX6Y4acZfpnhtxne/MJW8wtbzS9sNb+w1fzCfr3i9KPw5he2ml/Yan5hq/mFreYXtplf2GZ+YZv5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u01V6G2qhO92XXqb6l/Hr/Q2VcJXb1NVdpsq46td94Vz46tdt9LbVAlf7bqV3qZK+OptqkpvUyV8tetWdpsq46srGZXdpsr46iJkpbepEr7adSu9TZXw3a5Lb1MlfLfr0ttUCV+9TVXZbaqM73Zddpsq47tdl96mSvhu16W3qRK+epuq0ttUCd/tuuw2VcZXVzIqu02V8dVFyEpvUyV8t+vS21QJ3+269DZVwne7Lr1NlfDV21SV3abK+G7XZbepMr7bdeltqoTvdl16myrhu7ep6G2qhO92XXabKuOrKxmV3abK+OoiZKW3qRK+23XpbaqE73Zdepsq4btdl96mSvjubSp2myrju12X3abK+G7XpbepEr7bdeltqoTv3qait6kSvtt12W2qjK+uZFR2myrjq4uQld6mSvhu16W3qRK+23XpbaqE73Zdepsq4bu3qdhtqozvdl12myrju12X3qZK+G7XpbepEr57m4repkr4atdt7DZVxldXMhq7TZXx1UXI9sBf3YSvdt1Gb1MlfLXrNnqbKuGrXbfR21QJX71N1dhtqoyvdt3GblNlfLXrNnqbKuGrXbfR21QJX71N1ehtqoTvdl12myrjqysZjd2myvjqImSjt6kSvtt16W2qhO92XXqbKuG7XZfepkr46m2qxm5TZXy367LbVBnf7br0NlXCd7suvU2V8NXbVI3epkr4btdlt6kyvrqS0dhtqoyvLkI2epsq4btdl96mSvhu16W3qRK+23XpbaqE796mYrepMr7bddltqozvdl16myrhu12X3qZK+O5tKnqbKuG7XZfdpsr46kpGY7epMr66CNnobaqE73Zdepsq4btdl96mSvhu16W3qRK+e5uK3abK+G7XZbepMr7bdeltqoTvdl16myrhu7ep6G2qhO92XXabKuO7KxnsNlXGVxchG71NlfDdrktvUyV8t+vS21QJ3+269DZVwldvU3V2myrjq123s9tUGV/tuv2Bv7oJX+26nd6mSvjqbapOb1MlfLXrdnabKuOrKxmd3abK+OoiZKe3qRK+2nU7vU2V8NWu2+ltqoTvdl16myrhq7epOrtNlfHdrstuU2V8t+vS21QJ3+269DZVwldvU3V6myrhu12X3abK+OpKRme3qTK+ugjZ6W2qhO92XXqbKuG7XZfepkr4btelt6kSvnqbqrPbVBnf7brsNlXGd7suvU2V8N2uS29TJXz3NhW9TZXw3a7LblNlfHUlo7PbVBlfXYTs9DZVwne7Lr1NlfDdrktvUyV8t+vS21QJ371NxW5TZXy367LbVBnf7br0NlXCd7suvU2V8N3bVPQ2VcJ3uy67TZXx1ZWMzm5TZXx1EbLT21QJ3+269DZVwne7Lr1NlfDdrktvUyV89zYVu02V8d2uy25TZXy369LbVAnf7br0NlXCd29T0dtUCd/tuuw2VcZXVzIGu02V8dVFyEFvUyV8teuOB/7qJny16w56myrhq1130NtUCV+9TTXYbaqMr3bdwW5TZXy16w56myrhq1130NtUCV+9TTXobaqE73Zddpsq46srGYPdpsr46iLkoLepEr7bdeltqoTvdl16myrhu12X3qZK+OptqsFuU2V8t+uy21QZ3+269DZVwne7Lr1NlfDV21SD3qZK+G7XZbepMr66kjHYbaqMry5CDnqbKuG7XZfepkr4btelt6kSvtt16W2qhO/epmK3qTK+23XZbaqM73Zdepsq4btdl96mSvjubSp6myrhu12X3abK+OpKxmC3qTK+ugg56G2qhO92XXqbKuG7XZfepkr4btelt6kSvnubit2myvhu12W3qTK+23XpbaqE73Zdepsq4bu3qehtqoTvdl12myrjqysZg92myvjqIuSgt6kSvtt16W2qhO92XXqbKuG7XZfepkr47m0qdpsq46tdd7LbVBlf7bqT3qZK+GrXnQ/81U346m2qSW9TJXy16052myrjqysZk92myvjqIuSkt6kSvtp1J71NlfDVrjvpbaqEr3bdSW9TJXz1NtVkt6kyvtt12W2qjO92XXqbKuG7XZfepkr46m2qSW9TJXy367LbVBlfXcmY7DZVxlcXISe9TZXw3a5Lb1MlfLfr0ttUCd/tuvQ2VcJXb1NNdpsq47tdl92myvhu16W3qRK+23XpbaqE796morepEr7bddltqoyvrmRMdpsq46uLkJPepkr4btelt6kSvtt16W2qhO92XXqbKuG7t6nYbaqM73Zddpsq47tdl96mSvhu16W3qRK+e5uK3qZK+G7XZbepMr66kjHZbaqMry5CTnqbKuG7XZfepkr4btelt6kSvtt16W2qhO/epmK3qTK+23XZbaqM73Zdepsq4btdl96mSvjubSp6myrhu12X3abK+O5KBrtNlfHVRchFb1MlfLXrLnqbKuGrXXc98Fc34atdd9HbVAlfvU212G2qjK923cVuU2V8tesuepsq4atdd9HbVAlfvU216G2qhK923cVuU2V8dSVjsdtUGV9dhFz0NlXCd7suvU2V8N2uS29TJXy369LbVAlfvU212G2qjO92XXabKuO7XZfepkr4btelt6kSvnqbatHbVAnf7brsNlXGV1cyFrtNlfHVRchFb1MlfLfr0ttUCd/tuvQ2VcJ3uy69TZXw3dtU7DZVxne7LrtNlfHdrktvUyV8t+vS21QJ371NRW9TJXy367LbVBlfXclY7DZVxlcXIRe9TZXw3a5Lb1MlfLfr0ttUCd/tuvQ2VcJ3b1Ox21QZ3+267DZVxne7Lr1NlfDdrktvUyV89zYVvU2V8N2uy25TZXx1JWOx21QZX12EXPQ2VcJ3uy69TZXw3a5Lb1MlfLfr0ttUCd+9TcVuU2V8t+uy21QZX+26m96mSvhq1930NlXCV29T7Qf+6iZ8tetudpsq46srGZvdpsr46iLkprepEr7adTe9TZXw1a676W2qhK923U1vUyV89TbVZrepMr7bddltqozvdl16myrhu12X3qZK+Optqk1vUyV8t+uy21QZX13J2Ow2VcZXFyE3vU2V8N2uS29TJXy369LbVAnf7br0NlXCV29TbXabKuO7XZfdpsr4btelt6kSvtt16W2qhK/eptr0NlXCd7suu02V8dWVjM1uU2V8dRFy09tUCd/tuvQ2VcJ3uy69TZXw3a5Lb1MlfPc2FbtNlfHdrstuU2V8t+vS21QJ3+269DZVwndvU9HbVAnf7brsNlXGV1cyNrtNlfHVRchNb1MlfLfr0ttUCd/tuvQ2VcJ3uy69TZXw3dtU7DZVxne7LrtNlfHdrktvUyV8t+vS21QJ371NRW9TJXy367LbVBnfXclgt6kyvroIueltqoSvdt1Db1MlfLXrHnqbKuGrXfc86Fc346u3qQ67TZXx1a572G2qjK923UNvUyV8teseepsq4au3qQ69TZXw1a572G2qjK+uZBx2myrjq4uQh96mSvhu16W3qRK+23XpbaqE73Zdepsq4au3qQ67TZXx3a7LblNlfLfr0ttUCd/tuvQ2VcJXb1Mdepsq4btdl92myvjqSsZht6kyvroIeehtqoTvdl16myrhu12X3qZK+G7XpbepEr57m4rdpsr4btdlt6kyvtt16W2qhO92XXqbKuG7t6nobaqE73Zddpsq46srGYfdpsr46iLkobepEr7bdeltqoTvdl16myrhu12X3qZK+O5tKnabKuO7XZfdpsr4btelt6kSvtt16W2qhO/epqK3qRK+23XZbaqMr65kHHabKuOri5CH3qZK+G7XpbepEr7bdeltqoTvdl16myrhu7ep2G2qjO92XXabKuO7XZfepkr4ZtedD71NlfDN21Qvvnmb6sU3u+6Lj351M765kvHimysZL765CPnim4uQL77ZdedDb1MlfLPrvvhm133xza774qNf3Yxv3qZ68c3bVC++2XVffLPrvvhu16W3qRK+23XpbaqEb96mevHhr27Cd7suu02V8c2VjBffXMl48c1FyPnQ21QJ3+269DZVwne7Lr1NlfDdrktvUyV88zbVi2/epnrx3a7LblNlfLfr0ttUCd/tuvQ2VcI3b1O9+OZtqhff7brsNlXGN1cy5sNuU2V8cxHyxTcXIV98t+vS21QJ3+269DZVwne7Lr1NlfDd21TsNlXGd7suu02V8d2uS29TJXy369LbVAnfvU1Fb1MlfLfrsttUGd9cyXjxzZWMF99chHzx4a9uwne7Lr1NlfDdrktvUyV8t+vS21QJ371NxW5TZXy367LbVBnf7br0NlXCd7suvU2V8N3bVPQ2VcJ3uy67TZXx3ZUMdpsq45uLkC++uQj54rtdl96mSvhq1y30NlXCV7tuobepEr56m6o86Fc346tdt7DbVBlf7bqF3qZK+GrXLfQ2VcJXb1MVepsq4atdt7DbVBlfXcko7DZVxlcXIQu9TZXw3a5Lb1MlfLfr0ttUCd/tuvQ2VcJXb1MVdpsq47tdl92myvhu16W3qRK+23XpbaqEr96mKvQ2VcJ3uy67TZXx1ZWMwm5TZXx1EbLQ21QJ3+269DZVwne7Lr1NlfDdrktvUyV89TZVYbepMr7bddltqozvdl16myrhu12X3qZK+O5tKnqbKuG7XZfdpsr46kpGYbepMr66CFnobaqE73Zdepsq4btdl96mSvhu16W3qRK+e5uK3abK+G7XZbepMr7bdeltqoTvdl16myrhu7ep6G2qhO92XXabKuOrKxmF3abK+OoiZKG3qRK+23XpbaqE73Zdepsq4btdl96mSvjubSp2myrju12X3abK+G7XpbepEr7bdeltqoSv3qaq9DZVwle7bmW3qTK+upLxwrnx1UXISm9TJXy161Z6myrhq1230ttUCV/tupXepkr46m2qym5TZXy161Z2myrjq1230ttUCd/tuvQ2VcJXb1NVepsq4btdl92myvjqSkZlt6kyvroIWeltqoTvdl16myrhu12X3qZK+G7XpbepEr56m6qy21QZ3+267DZVxne7Lr1NlfDdrktvUyV89TZVpbepEr7bddltqoyvrmRUdpsq46uLkJXepkr4btelt6kSvtt16W2qhO92XXqbKuG7t6nYbaqM73Zddpsq47tdl96mSvhu16W3qRK+e5uK3qZK+G7XZbepMr66klHZbaqMry5CVnqbKuG7XZfepkr4btelt6kSvtt16W2qhO/epmK3qTK+23XZbaqM73Zdepsq4btdl96mSvjubSp6myrhu12X3abK+O5KBrtNlfHVRchKb1MlfLfr0ttUCd/tuvQ2VcJXu26jt6kSvnqbqrHbVBlf7brtgb+6CV/tuo3epkr4atdt9DZVwldvUzV6myrhq123sdtUGV9dyWjsNlXGVxchG71NlfDVrtvobaqE73Zdepsq4btdl96mSvjqbarGblNlfLfrsttUGd/tuvQ2VcJ3uy69TZXw1dtUjd6mSvhu12W3qTK+upLR2G2qjK8uQjZ6myrhu12X3qZK+G7XpbepEr7bdeltqoSv3qZq7DZVxne7LrtNlfHdrktvUyV8t+vS21QJ371NRW9TJXy367LbVBlfXclo7DZVxlcXIRu9TZXw3a5Lb1MlfLfr0ttUCd/tuvQ2VcJ3b1Ox21QZ3+267DZVxne7Lr1NlfDdrktvUyV89zYVvU2V8N2uy25TZXx1JaOx21QZX12EbPQ2VcJ3uy69TZXw3a5Lb1MlfLfr0ttUCd+9TcVuU2V8t+uy21QZ3+269DZVwne7Lr1NlfDd21T0NlXCV7tuZ7epMr66ktHZbaqMry5C9gf+6iZ8tet2epsq4atdt9PbVAlf7bqd3qZK+Optqs5uU2V8tet2dpsq46tdt9PbVAlf7bqd3qZK+Optqk5vUyV8t+uy21QZX13J6Ow2VcZXFyE7vU2V8N2uS29TJXy369LbVAnf7br0NlXCV29TdXabKuO7XZfdpsr4btelt6kSvtt16W2qhK/epur0NlXCd7suu02V8dWV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Xbc+8Fc34Bf4q5vw1a5bi9p1a0G/uhkf/epmfJHrlg/4Itf9hK923VrUrluL23Wr23Wr23Wr23Wrepuqfr3d88P4btetbtetbtetbtetbtdtbtdt6m2q2tTbVLW5XffrHaYfxke/uhkf/epmfJHrflD1JnLdT/hu13W3qaq7TVXdbarqblNVd5uquttU1d2mqvQ2VfiGmd2myvhu12W3qTK+23XpbaqE796morepEr7bddltqoyvrmRUdpsq44tc94Oqm9pUn/DdrutuU1V6myrhw1/dhO92XXqbKuG7t6nYbaqM73Zddpsq47tdl96mSvhu16W3qRK+e5uK3qZK+G7XZbepMr66klHZbaqMry5CVnqbKuG7XZfepkr4btelt6kSvtt16W2qhO/epmK3qTK+23XZbaqM73Zdepsq4btdl96mSvjubSp6myrhq123sdtUGV9dyWjsNlXGVxch2wN/dRO+2nUbvU2V8NWu2+htqoSvdt1Gb1MlfPU2VWO3qTK+2nUbu02V8dWu2+htqoSvdt1Gb1MlfPU2VaO3qRK+23XZbaqMr65kNHabKuOri5CN3qZK+G7XpbepEr7bdeltqoTvdl16myrhq7epGrtNlfHdrstuU2V8t+vS21QJ3+269DZVwldvUzV6myrhu12X3abK+OpKRmO3qTK+ugjZ6G2qhO92XXqbKuG7XZfepkr4btelt6kSvnubit2myvhu12W3qTK+23XpbaqE73Zdepsq4bu3qehtqoTvdl12myrjqysZjd2myvjqImSjt6kSvtt16W2qhO92XXqbKuG7XZfepkr47m0qdpsq47tdl92myvhu16W3qRK+23XpbaqE796morepEr7bddltqozvrmSw21QZX12EbPQ2VcJ3uy69TZXw3a5Lb1MlfLfr0ttUCV+9TdXZbaqMr3bdzm5TZXy16/YH/uomfLXrdnqbKuGrt6k6vU2V8NWu29ltqoyvrmR0dpsq46uLkJ3epkr4atft9DZVwle7bqe3qRK+23XpbaqEr96m6uw2VcZ3uy67TZXx3a5Lb1MlfLfr0ttUCV+9TdXpbaqE73Zddpsq46srGZ3dpsr46iJkp7epEr7bdeltqoTvdl16myrhu12X3qZK+Optqs5uU2V8t+uy21QZ3+269DZVwne7Lr1NlfDd21T0NlXCd7suu02V8dWVjM5uU2V8dRGy09tUCd/tuvQ2VcJ3uy69TZXw3a5Lb1MlfPc2FbtNlfHdrstuU2V8t+vS21QJ3+269DZVwndvU9HbVAnf7brsNlXGV1cyOrtNlfHVRchOb1MlfLfr0ttUCd/tuvQ2VcJ3uy69TZXw3dtU7DZVxne7LrtNlfHdrktvUyV8t+vS21QJ371NRW9TJXy367LbVBlfXckY7DZVxlcXIQe9TZXw1a47Hvirm/DVrjvobaqEr3bdQW9TJXz1NtVgt6kyvtp1B7tNlfHVrjvobaqEr3bdQW9TJXz1NtWgt6kSvtt12W2qjK+uZAx2myrjq4uQg96mSvhu16W3qRK+23XpbaqE73Zdepsq4au3qQa7TZXx3a7LblNlfLfr0ttUCd/tuvQ2VcJXb1MNepsq4btdl92myvjqSsZgt6kyvroIOehtqoTvdl16myrhu12X3qZK+G7XpbepEr57m4rdpsr4btdlt6kyvtt16W2qhO92XXqbKuG7t6nobaqE73Zddpsq46srGYPdpsr46iLkoLepEr7bdeltqoTvdl16myrhu12X3qZK+O5tKnabKuO7XZfdpsr4btelt6kSvtt16W2qhO/epqK3qRK+23XZbaqMr65kDHabKuOri5CD3qZK+G7XpbepEr7bdeltqoTvdl16myrhu7ep2G2qjK923cluU2V8tetOepsq4atddz7wVzfhq7epJr1NlfDVrjvZbaqMr65kTHabKuOri5CT3qZK+GrXnfQ2VcJXu+6kt6kSvtp1J71NlfDV21ST3abK+G7XZbepMr7bdeltqoTvdl16myrhq7epJr1NlfDdrstuU2V8dSVjsttUGV9dhJz0NlXCd7suvU2V8N2uS29TJXy369LbVAlfvU012W2qjO92XXabKuO7XZfepkr4btelt6kSvnubit6mSvhu12W3qTK+upIx2W2qjK8uQk56myrhu12X3qZK+G7XpbepEr7bdeltqoTv3qZit6kyvtt12W2qjO92XXqbKuG7XZfepkr47m0qepsq4btdl92myvjqSsZkt6kyvroIOeltqoTvdl16myrhu12X3qZK+G7XpbepEr57m4rdpsr4btdlt6kyvtt16W2qhO92XXqbKuG7t6nobaqE73Zddpsq47srGew2VcZXFyEXvU2V8NWuu+htqoSvdt31wF/dhK923UVvUyV89TbVYrepMr7adRe7TZXx1a676G2qhK923UVvUyV89TbVorepEr7adRe7TZXx1ZWMxW5TZXx1EXLR21QJ3+269DZVwne7Lr1NlfDdrktvUyV89TbVYrepMr7bddltqozvdl16myrhu12X3qZK+OptqkVvUyV8t+uy21QZX13JWOw2VcZXFyEXvU2V8N2uS29TJXy369LbVAnf7br0NlXCd29TsdtUGd/tuuw2VcZ3uy69TZXw3a5Lb1MlfPc2Fb1NlfDdrstuU2V8dSVjsdtUGV9dhFz0NlXCd7suvU2V8N2uS29TJXy369LbVAnfvU3FblNlfLfrsttUGd/tuvQ2VcJ3uy69TZXw3dtU9DZVwne7LrtNlfHVlYzFblNlfHURctHbVAnf7br0NlXCd7suvU2V8N2uS29TJXz3NhW7TZXx3a7LblNlfLXrbnqbKuGrXXfT21QJX71NtR/4q5vw1a672W2qjK+uZGx2myrjq4uQm96mSvhq1930NlXCV7vuprepEr7adTe9TZXw1dtUm92myvhu12W3qTK+23XpbaqE73Zdepsq4au3qTa9TZXw3a7LblNlfHUlY7PbVBlfXYTc9DZVwne7Lr1NlfDdrktvUyV8t+vS21QJX71Ntdltqozvdl12myrju12X3qZK+G7XpbepEr56m2rT21QJ3+267DZVxldXMja7TZXx1UXITW9TJXy369LbVAnf7br0NlXCd7suvU2V8N3bVOw2VcZ3uy67TZXx3a5Lb1MlfLfr0ttUCd+9TUVvUyV8t+uy21QZX13J2Ow2VcZXFyE3vU2V8N2uS29TJXy369LbVAnf7br0NlXCd29TsdtUGd/tuuw2VcZ3uy69TZXw3a5Lb1MlfPc2Fb1NlfDdrstuU2V8dyWD3abK+Ooi5Ka3qRK+2nUPvU2V8NWue+htqoSvdt3zoF/djK/epjrsNlXGV7vuYbepMr7adQ+9TZXw1a576G2qhK/epjr0NlXCV7vuYbepMr66knHYbaqMry5CHnqbKuG7XZfepkr4btelt6kSvtt16W2qhK/epjrsNlXGd7suu02V8d2uS29TJXy369LbVAlfvU116G2qhO92XXabKuOrKxmH3abK+Ooi5KG3qRK+23XpbaqE73Zdepsq4btdl96mSvjubSp2myrju12X3abK+G7XpbepEr7bdeltqoTv3qait6kSvtt12W2qjK+uZBx2myrjq4uQh96mSvhu16W3qRK+23XpbaqE73Zdepsq4bu3qdhtqozvdl12myrju12X3qZK+G7XpbepEr57m4repkr4btdlt6kyvrqScdhtqoyvLkIeepsq4btdl96mSvhu16W3qRK+23XpbaqE796mYrepMr7bddltqozvdl16myrhm113P/Q2VcI3b1O9+OZtqhff7LovPvrVzfjmSsaLb65kvPjmIuSLby5Cvvhm190PvU2V8M2u++KbXffFN7vui49+dTO+eZvqxTdvU734Ztd98c2u++K7XZfepkr4btelt6kSvnmb6sWHv7oJ3+267DZVxjdXMl58cyXjxTcXIfdDb1MlfLfr0ttUCd/tuvQ2VcJ3uy69TZXwzdtUL755m+rFd7suu02V8d2uS29TJXy369LbVAnfvE314pu3qV58t+uy21QZ31zJ2A+7TZXxzUXIF99chHzx3a5Lb1MlfLfr0ttUCd/tuvQ2VcJ3b1Ox21QZ3+267DZVxne7Lr1NlfDdrktvUyV89zYVvU2V8N2uy25TZXxzJePFN1cyXnxzEfLFh7+6Cd/tuvQ2VcJ3uy69TZXw3a5Lb1MlfPc2FbtNlfHdrstuU2V8t+vS21QJ3+269DZVwndvU9HbVAnf7brsNlXGd1cy2G2qjG8uQr745iLki+92XXqbKuGrXbfQ21QJX+26hd6mSvjqbaryoF/djK923cJuU2V8tesWepsq4atdt9DbVAlfvU1V6G2qhK923cJuU2V8dSWjsNtUGV9dhCz0NlXCd7suvU2V8N2uS29TJXy369LbVAlfvU1V2G2qjO92XXabKuO7XZfepkr4btelt6kSvnqbqtDbVAnf7brsNlXGV1cyCrtNlfHVRchCb1MlfLfr0ttUCd/tuvQ2VcJ3uy69TZXw1dtUhd2myvhu12W3qTK+23XpbaqE73Zdepsq4bu3qehtqoTvdl12myrjqysZhd2myvjqImSht6kSvtt16W2qhO92XXqbKuG7XZfepkr47m0qdpsq47tdl92myvhu16W3qRK+23XpbaqE796morepEr7bddltqoyvrmQUdpsq46uLkIXepkr4btelt6kSvtt16W2qhO92XXqbKuG7t6nYbaqM73Zddpsq47tdl96mSvhu16W3qRK+epuq0ttUCV/tupXdpsr46krGC+fGVxchK71NlfDVrlvpbaqEr3bdSm9TJXy161Z6myrhq7epKrtNlfHVrlvZbaqMr3bdSm9TJXy369LbVAlfvU1V6W2qhO92XXabKuOrKxmV3abK+OoiZKW3qRK+23XpbaqE73Zdepsq4btdl96mSvjqbarKblNlfLfrsttUGd/tuvQ2VcJ3uy69TZXw1dtUld6mSvhu12W3qTK+upJR2W2qjK8uQlZ6myrhu12X3qZK+G7XpbepEr7bdeltqoTv3qZit6kyvtt12W2qjO92XXqbKuG7XZfepkr47m0qepsq4btdl92myvjqSkZlt6kyvroIWeltqoTvdl16myrhu12X3qZK+G7XpbepEr57m4rdpsr4btdlt6kyvtt16W2qhO92XXqbKuG7t6nobaqE73Zddpsq47srGew2VcZXFyErvU2V8N2uS29TJXy369LbVAlf7bqN3qZK+OptqsZuU2V8teu2B/7qJny16zZ6myrhq1230dtUCV+9TdXobaqEr3bdxm5TZXx1JaOx21QZX12EbPQ2VcJXu26jt6kSvtt16W2qhO92XXqbKuGrt6kau02V8d2uy25TZXy369LbVAnf7br0NlXCV29TNXqbKuG7XZfdpsr46kpGY7epMr66CNnobaqE73Zdepsq4btdl96mSvhu16W3qRK+epuqsdtUGd/tuuw2VcZ3uy69TZXw3a5Lb1MlfPc2Fb1NlfDdrstuU2V8dSWjsdtUGV9dhGz0NlXCd7suvU2V8N2uS29TJXy369LbVAnfvU3FblNlfLfrsttUGd/tuvQ2VcJ3uy69TZXw3dtU9DZVwne7LrtNlfHVlYzGblNlfHURstHbVAnf7br0NlXCd7suvU2V8N2uS29TJXz3NhW7TZXx3a7LblNlfLfr0ttUCd/tuvQ2VcJ3b1PR21QJX+26nd2myvjqSkZnt6kyvroI2R/4q5vw1a7b6W2qhK923U5vUyV8tet2epsq4au3qTq7TZXx1a7b2W2qjK923U5vUyV8tet2epsq4au3qTq9TZXw3a7LblNlfHUlo7PbVBlfXYTs9DZVwne7Lr1NlfDdrktvUyV8t+vS21QJX71N1dltqozvdl12myrju12X3qZK+G7XpbepEr56m6rT21QJ3+267DZVxldXMjq7TZXx1UXITm9TJXy369LbVAnf7br0NlXCd7suvU2V8N3b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db+61f3qfv2+94fx0a9uxne7bnW7bnW7boW/uuf85ihl/BW/wV/dhA9/dRM+/NVN+OhXN36///Vb7R/Gd7tuc7tuE726H3SluV23uX/C3N0/Ye5u1+1u1+1u1/363f0P47tdt7tdt8Nf3fANc4e/ugnf7brD7brD7brD7boD/uomfPirm/Ddrjvcrjvcn+sO9Kub8d2f607357rT7brT7brT7bpf72H8ML7bdafbdaf7c93p/lx3ul13uV13uV13uV13uV33622TH8aHv7oJH/7qJny36y636y70qxvxN/rVzfgi1/2g6lvkup/w3a779U7ND+O7XXe7XXe7XXe7XXe7t6mOe5vquF33uF33uF33682hH8Z3u+5xu+5xb1Md9zbVUbtue9Su2x70q5vx0a9uxhe5bvmAD391E77adZu7TdXcbarmblM1d5uqudtUzd2mau42VaO3qf71b5gbu02V8dWu29htqoyvdt1Gb1MlfPU2VaO3qRK+23XZbaqMr65kNHabKuOLXPeDqpvaVJ/w3a7rblM1epsq4NPbVAnf7br0NlXCV29TNXabKuO7XZfdpsr4btelt6kSvtt16W2qhK/epmr0NlXCd7suu02V8dWVjMZuU2V8dRGy0dtUCd/tuvQ2VcJ3uy69TZXw3a5Lb1MlfPc2FbtNlfHdrstuU2V8t+vS21QJ3+269DZVwndvU9HbVAnf7brsNlXGV1cyGrtNlfHVRchGb1MlfLfr0ttUCd/tuvQ2VcJ3uy69TZXw3dtU7DZVxne7LrtNlfHdrktvUyV8t+vS21QJ371NRW9TJXy367LbVBnfXclgt6kyvroI2ehtqoTvdl16myrhu12X3qZK+G7XpbepEr56m6qz21QZX+26nd2myvhq1+0P/NVN+GrX7fQ2VcJXb1N1epsq4atdt7PbVBlfXcno7DZVxlcXITu9TZXw1a7b6W2qhK923U5vUyV8t+vS21QJX71N1dltqozvdl12myrju12X3qZK+G7XpbepEr56m6rT21QJ3+267DZVxldXMjq7TZXx1UXITm9TJXy369LbVAnf7br0NlXCd7suvU2V8NXbVJ3dpsr4btdlt6kyvtt16W2qhO92XXqbKuG7t6nobaqE73Zddpsq46srGZ3dpsr46iJkp7epEr7bdeltqoTvdl16myrhu12X3qZK+O5tKnabKuO7XZfdpsr4btelt6kSvtt16W2qhO/epqK3qRK+23XZbaqMr65kdHabKuOri5Cd3qZK+G7XpbepEr7bdeltqoTvdl16myrhu7ep2G2qjO92XXabKuO7XZfepkr4btelt6kSvnubit6mSvhu12W3qTK+upIx2G2qjK8uQg56myrhq113PPBXN+GrXXfQ21QJX+26g96mSvjqbarBblNlfLXrDnabKuOrXXfQ21QJX+26g96mSvjqbapBb1MlfLfrsttUGV9dyRjsNlXGVxchB71NlfDdrktvUyV8t+vS21QJ3+269DZVwldvUw12myrju12X3abK+G7XpbepEr7bdeltqoSv3qYa9DZVwne7LrtNlfHVlYzBblNlfHURctDbVAnf7br0NlXCd7suvU2V8N2uS29TJXz3NhW7TZXx3a7LblNlfLfr0ttUCd/tuvQ2VcJ3b1PR21QJ3+267DZVxldXMga7TZXx1UXIQW9TJXy369LbVAnf7br0NlXCd7suvU2V8N3bVOw2VcZ3uy67TZXx3a5Lb1MlfLfr0ttUCd+9TUVvUyV8t+uy21QZX13JGOw2VcZXFyEHvU2V8N2uS29TJXy369LbVAnf7br0NlXCd29TsdtUGV/tupPdpsr4ated9DZVwle77nzgr27CV29TTXqbKuGrXXey21QZX13JmOw2VcZXFyEnvU2V8NWuO+ltqoSvdt1Jb1MlfLXrTnqbKuGrt6kmu02V8d2uy25TZXy369LbVAnf7br0NlXCV29TTXqbKuG7XZfdpsr46krGZLepMr66CDnpbaqE73Zdepsq4btdl96mSvhu16W3qRK+eptqsttUGd/tuuw2VcZ3uy69TZXw3a5Lb1MlfPc2Fb1NlfDdrstuU2V8dSVjsttUGV9dhJz0NlXCd7suvU2V8N2uS29TJXy369LbVAnfvU3FblNlfLfrsttUGd/tuvQ2VcJ3uy69TZXw3dtU9DZVwne7LrtNlfHVlYzJblNlfHURctLbVAnf7br0NlXCd7suvU2V8N2uS29TJXz3NhW7TZXx3a7LblNlfLfr0ttUCd/tuvQ2VcJ3b1PR21QJ3+267DZVxndXMthtqoyvLkIuepsq4atdd9HbVAlf7brrgb+6CV/tuovepkr46m2qxW5TZXy16y52myrjq1130dtUCV/tuovepkr46m2qRW9TJXy16y52myrjqysZi92myvjqIuSit6kSvtt16W2qhO92XXqbKuG7XZfepkr46m2qxW5TZXy367LbVBnf7br0NlXCd7suvU2V8NXbVIvepkr4btdlt6kyvrqSsdhtqoyvLkIuepsq4btdl96mSvhu16W3qRK+23XpbaqE796mYrepMr7bddltqozvdl16myrhu12X3qZK+O5tKnqbKuG7XZfdpsr46krGYrepMr66CLnobaqE73Zdepsq4btdl96mSvhu16W3qRK+e5uK3abK+G7XZbepMr7bdeltqoTvdl16myrhu7ep6G2qhO92XXabKuOrKxmL3abK+Ooi5KK3qRK+23XpbaqE73Zdepsq4btdl96mSvjubSp2myrju12X3abK+GrX3fQ2VcJXu+6mt6kSvnqbaj/wVzfhq113s9tUGV9dydjsNlXGVxchN71NlfDVrrvpbaqEr3bdTW9TJXy16256myrhq7epNrtNlfHdrstuU2V8t+vS21QJ3+269DZVwldvU216myrhu12X3abK+OpKxma3qTK+ugi56W2qhO92XXqbKuG7XZfepkr4btelt6kSvnqbarPbVBnf7brsNlXGd7suvU2V8N2uS29TJXz1NtWmt6kSvtt12W2qjK+uZGx2myrjq4uQm96mSvhu16W3qRK+23XpbaqE73Zdepsq4bu3qdhtqozvdl12myrju12X3qZK+G7XpbepEr57m4repkr4btdlt6kyvrqSsdltqoyvLkJuepsq4btdl96mSvhu16W3qRK+23XpbaqE796mYrepMr7bddltqozvdl16myrhu12X3qZK+O5tKnqbKuG7XZfdpsr47koGu02V8dVFyE1vUyV8teseepsq4atd99DbVAlf7brnQb+6GV+9TXXYbaqMr3bdw25TZXy16x56myrhq1330NtUCV+9TXXobaqEr3bdw25TZXx1JeOw21QZX12EPPQ2VcJ3uy69TZXw3a5Lb1MlfLfr0ttUCV+9TXXYbaqM73Zddpsq47tdl96mSvhu16W3qRK+epvq0NtUCd/tuuw2VcZXVzIOu02V8dVFyENvUyV8t+vS21QJ3+269DZVwne7Lr1NlfDd21TsNlXGd7suu02V8d2uS29TJXy369LbVAnfvU1Fb1MlfLfrsttUGV9dyTjsNlXGVxchD71NlfDdrktvUyV8t+vS21QJ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yIKbgywXbc0uuDnIgpuDLLg5yIKbgyy4OciCm4MsuDnIgpuDLLg5yIKbgyy4OciCm4MsuDnIgpuDLLg5yIKbgyy4OciCm4MsuDnIgpuDLLg5yIKbgyy4OciCm4MsuDnIgpuDLLg5yIKbgyy4OciCm4MsuDnIgpuDLLg5yIKbgyy4OciCm4MsuDnIgpuDLLg5yIKbgyy4OciCm4MsuDnIgpuDLLg5yIKbgyy4OciCm4MsuDnIgpuDLLg5yIKbgyy4OciCm4MsuDnIgpuDLLg5yIKbgyy4OciCm4MsuDnIgpuDLLg5yIKbgyy4OciCm4MsuDnIgpuDLLg5yIKbgyy4OciCm4MsuDnIgpuDLLg5yIKbgyy4OciCm4MsuDnIgpuDLLg5yIKbgyy4OciCm4MsuDnIgpuDLLg5yIKbgyy4OciCm4MsuDnIgpuDLLg5yIKbgyy4OciKm4OsuDnIipuDrLg5yHrR1uyKm4OsuDnIipuDrLg5yIqbg6y4OciKm4OsuDnIipuDrLg5yIqbg6y4OciKm4OsuDnIipuDrLg5yIqbg6y4OciKm4OsuDnIipuDrLg5yIqbg6y4OciKm4OsuDnIipuDrLg5yIqbg6y4OciKm4OsuDnIipuDrLg5yIqbg6y4OciKm4OsuDnIipuDrLg5yIqbg6y4OciKm4OsuDnIipuDrLg5yIqbg6y4OciKm4OsuDnIipuDrLg5yIqbg6y4OciKm4OsuDnIipuDrLg5yIqbg6y4OciKm4OsuDnIipuDrLg5yIqbg6zb5yBzvv8kynf7vxL9n3c57p8cv375/+ZP4vmzeP4inr+K52/i+bt4/iGe/ybnT3OOnxypvMs/tfPf6P13IT96/13IL7T/pnf5hfbft/mF9t+3+cX331t8/73F998bvf8u5Efvv3b+Kc6/U5x/pzj/Tvj+O+efHCm1d/nh+6+ZH77/mvnh+6+ZH73/2uf/Kc6/U5t/26XNv+0S2n/Tu/za/Nsu7c+f2wXff8382vzbLm3+bZc2/7ZLm3/bpc2/LWnzb0vw/dc4P7cE33/N/Nr827b7Drzza/NvS9r82xJ8/zXzw/dfM784/2Zx/s3a3/+2jN5/F/Jrf//btrsrvPOL828W598szr9ZnH+zOP8Wcf4t2t//tqL9/W8r4vy73UPinV+cf4s4/xZx/i3i/Fvg+6+Vv8L3XzO/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xfmX7b9ayC/Ov3T/lZlfnH/p/iszv/j9K7r/yswvzr9s/9VCfm3/xs32Xy3k1/ZP3nT/lZlfnH/p/iszvzj/0v1XZn5x/qX7r8z84vev2P6rhfzi/Mv2Xy3kF+dfuv/KzC/Ov3T/lZlf/P4V3X9l5hfnX7b/aiG/tn/jZvuvFvJr+ydvuv/KzC/Ov3T/lZlfnH/p/iszvzj/0v1XZn7x+1ds/9VCfnH+ZfuvFvJr8++k+6/M/Nr8O+n+KzO/9v2recH3XzO/Nv9Otv9qIb+2f2Oy/VcL+bX9k5PuvzLza/PvpPuvzPza/Dvp/iszvzb/Trr/ysyvff9qsv1XC/nF+Zftv1rIL86/dP+VmV+cf+n+KzO/9v2rSfdfmfm1P3+edP+VmV98/6X7r8z84vuvuP9qbvdf9Xr9yd97f5eo4hI1XKKOS7R7HxtX+5No5Gn8HbSfP5pW67v0t3T6qZx+u0HKN32STp+l0xfp9FU6fZNO36XTS++1VXqvrdJ7bZPea5v0Xtuk99omvddut0T5ppfea5v0Xtuk99omvdc26b22S++1XXqv7dJ7bZfea7cboXzTS++1XXqv7dJ7bZfea7v0Xjuk99ohvdcO6b12SO+12+1Pvuml99ohvdcO6b12SO+1Q3qvvaX32lt6r72l99pbeq/dbnryTS+9197Se+0tvdfe0nvtLb3XTum9dkrvtVN6r53Se+12q5Nveum9dkrvtVN6r53Se+0U3mvTdQnvta/0wnvtK73wXvtKL7zXvtIL77Wv9MJ77Su98F77Si+8177SC++1r/TSe22S3muT9F6bpPfaJL3Xbrc1+aaX3muT9F6bpPfaJL3XJum9NkvvtVl6r83Se22W3mu3m5l800vvtVl6r83Se22W3muz9F5bpPfaIr3XFum9tkjvtdudTb7ppffaIr3XKnujXuml91plb1S6lL1Rr/TSe62yN+qVXnqvVfZGvdJL77XK3qhXeum9Vtkb9Uovvdcqe6Ne6aX3WmVv1Cu99F6r7I16pZfea5W9Ua/00nutsjfqlV56r1X2Rr3SS++1yt6oV3rpvVbZG/VKL73XKnujXuml91plb9QrvfReq+yNeqWX3muVvVGv9NJ7rbI36pVeeq9V9ka90kvvtcreqFd66b1W2Rv1Si+91yp7o17ppfdaZW/UK730XqvsjXqll95rlb1Rr/TS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bit5kttKnuS2kie5reRJbit5kttKnuS2kie5reRJbit5kttKnuS2kie5reRJbit5kttKnuS2kie5reRJbit5kttKnuS2kie5reRJbit5kttKnuS2kie5reRJbit5kttKnuS2kie5reRJbit5kttKnuS2kie5reRJbit5kttKnuS2kie5reRJbit5kttKnuS2kie5reRJbit5kttKnuS2kie5reRJbit5kttKnuS2kie5reRJbit5kttKnuS2kie5reRJbit5kttKnuS2kie5reRJbit5kttKnuS2kie5reRJbit5kttKnuS2kie5reRJbit5kttKnuS2kie5reRJbit5kttKnuS2kie5reRJbit5kttKnuS2kie5reRJbit5kttKnuS2kie5reRJbit5kttKnuS2kie5reRJXlfyJK8reZLXlTzJ60qe5DXISpNdqIKqK3mS15U8yetKnuR1JU/yupIneV3Jk7yu5EleZ3uSp6D2Itp+bnnqZGWlyZaVJqsrTdZWmmxdabJtocnO9iT/3snGlSabVprsShXUbE/y753sShVUWqmCSitVUGmlCiqtVEHllSqovFIFlVeqoPJKFdRsT/LvnexKFVReqYLKK1VQeaUKKq9UQclKFZSsVEHJShWUrFRBzfYk/97J/v0KSmOqvz6sUe16sq219OvDMYQPvzqe8qeYQ36RxJzaXz7/awrqfwrmfwrV/xSa+yk84OD97VOI/qeQ/E/h7yu+xSq/Pmwp1espiJQXkojZGZHgiAqOSHFEf1/ZLOfXUrCsHSLV8Kq8VKWcEVUcUftGIj0jesDG+GmiiCNKOKIHcrbk14I2KR3ZiUGz7rpjTc+YBMhUZjNt25k70/ZnOmNSIJN9K1M9ZapApsZjesBG9XmmOJkpxrrXxTG2s5z5gCnp80wZyCRApgJkUiDT7Dwec6w7U87xjKkCmRqPqQYgUwQyJSDT9Dwu7xocpcgZkwCZpudxq+9M21bX/77eL4stvbZEYpP64dP2moG6n4GxZ5BCe9+yTOUvMzjZl9L9iKz95YTs12TrSpOdrWoplD0zphjOMmMLQKYIZEpApjyfyT4wne0yP2D+9jxTATIpkMmATBXI1HBMLQQgUwQyJSDT7DwuW/p5MUlL4YxJgEyz87g0fR30xBJEzpgUyDQ7j5ew/+pYYpJOUf3oc3Mt1KVm21aa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","file_map":{"6":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"25":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(unsafe { field_less_than(b, a) });\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"26":{"source":"pub mod bn254;\nuse crate::runtime::is_unconstrained;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"36":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod schnorr;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod eddsa;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod ec;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod bigint;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(x: Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(x: T) -> Field {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(\n        crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y),\n    )\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\n","path":"std/lib.nr"},"69":{"source":"use dep::jwt::JWT;\n\nglobal MAX_PARTIAL_DATA_LENGTH: u32 = 640; // Data after partial SHA\nglobal MAX_DOMAIN_LENGTH: u32 = 50;\nglobal NONCE_LENGTH: u32 = 32;\n\n/**\n * @brief Verify JWT signature (RSA/SHA256 only) and validate hd and nonce fields\n *\n * @param partial_data: OIDC JWT (id_token) base64 data (`$header.$payload`) as byte array of ascii characters\n *                      We do partial SHA on the data up to hd field outside of the circuit, to reduce constraints\n *                      This field only contains the bytes after partial SHA; padded to MAX_PARTIAL_DATA_LENGTH\n * @param partial_hash: The 256-bit partial hash of the `data`\n * @param full_data_length: The full length of the `data` (before partial SHA)\n * @param b64_offset: Offset needed in `partial_data` to make the payloadB64 a multiple of 4\n *                    Signed data is $header.$payload. $payload might not be a multiple of 4 in `partial_data`, so we need to offset\n *                    Not attack-able by giving an incorrect offset, as string match of hd and nonce will fail\n * @param pubkey_modulus_limbs: RSA public key modulus limbs (2048-bit split into 18 limbs)\n * @param redc_params_limbs: RSA reduction parameters limbs\n * @param signature_limbs: RSA signature limbs\n * @param domain: Domain name (`hd` key) as a byte array of ascii characters padded to MAX_DOMAIN_LENGTH\n * @param nonce: JWT `nonce` as a byte array of ascii characters - 32 bytes\n **/\nfn main(\n    partial_data: BoundedVec<u8, MAX_PARTIAL_DATA_LENGTH>,\n    partial_hash: [u32; 8],\n    full_data_length: u32,\n    b64_offset: u32,\n    pubkey_modulus_limbs: pub [Field; 18],\n    redc_params_limbs: [Field; 18],\n    signature_limbs: [Field; 18],\n    domain: pub BoundedVec<u8, MAX_DOMAIN_LENGTH>,\n    nonce: pub BoundedVec<u8, NONCE_LENGTH>,\n) {\n    let jwt = JWT::init_with_partial_hash(\n        partial_data,\n        partial_hash,\n        full_data_length,\n        b64_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n    jwt.validate_key_value::<300, 2, MAX_DOMAIN_LENGTH>(\"hd\".as_bytes(), domain); // Domain is under the hd key for Google Workspace tokens\n    jwt.validate_key_value::<300, 5, 32>(\"nonce\".as_bytes(), nonce);\n\n    // TODO: \n    // validate exp - is there a chance the token is expired? Do we care?\n    // validate aud - is there a chance the token was generated for a different app?\n    // validate is_email_verified? - can users create accounts without verifying their email?\n}\n","path":"/Users/saleel/Aztec/stealth_note/circuit/src/main.nr"},"70":{"source":"use dep::std::hash::sha256_var;\nuse dep::bignum::{params::BigNumParams, RuntimeBigNum};\nuse dep::rsa::{rsa::verify_sha256_pkcs1v15, types::RBN2048};\nuse dep::string_search::{SubString, StringBody};\nuse dep::base64::BASE64_URL_DECODER;\nuse dep::zkemail::partial_hash::partial_sha256_var_end;\n\n/**\n * @brief Struct representing a JWT. Use the init functions to create an instance\n *        Currently only supports RSA 2048/SHA256 signatures\n **/\npub struct JWT<let DATA_LENGTH: u32> {\n    data: BoundedVec<u8, DATA_LENGTH>,\n    pubkey_modulus_limbs: [Field; 18],\n    redc_params_limbs: [Field; 18],\n    signature_limbs: [Field; 18],\n    partial_hash: [u32; 8],\n    full_data_length: u32,\n    b64_offset: u32,\n    is_partial_hash: bool, // used internally\n}\n\nimpl<let DATA_LENGTH: u32> JWT<DATA_LENGTH> {\n    /**\n    * @brief Initialize JWT struct\n    *\n    * @param data: Signed JWT data (base64 encoded `$header.$payload`) as byte array of ascii characters\n    * @param pubkey_modulus_limbs: RSA public key modulus limbs (2048-bit split into 18 limbs)\n    * @param redc_params_limbs: RSA reduction parameters limbs (2048-bit split into 18 limbs)\n    * @param signature_limbs: RSA signature limbs (2048-bit split into 18 limbs)\n    **/\n    pub fn init(\n        data: BoundedVec<u8, DATA_LENGTH>,\n        b64_offset: u32,\n        pubkey_modulus_limbs: [Field; 18],\n        redc_params_limbs: [Field; 18],\n        signature_limbs: [Field; 18],\n    ) -> JWT<DATA_LENGTH> {\n        assert(data.len() <= DATA_LENGTH, \"data length is too long\");\n\n        JWT {\n            data,\n            full_data_length: DATA_LENGTH,\n            partial_hash: [0; 8],\n            b64_offset: b64_offset,\n            pubkey_modulus_limbs,\n            redc_params_limbs,\n            signature_limbs,\n            is_partial_hash: false,\n        }\n    }\n\n    /**\n    * @brief Initialize JWT with partial SHA256 hash'ed input\n\n    * @param partial_data: Signed JWT data (base64 encoded `$header.$payload`) after partial SHA256 hashed block\n    * @param partial_hash: The 256-bit partial hash of the `partial_data` up to a certain block\n    * @param full_data_length: The full length of the `data` (before partial SHA)\n    * @param b64_offset: Offset needed in `partial_data` to make the payloadB64 a multiple of 4 (for base64 decoding)\n    *                    Not attack-able by giving an incorrect offset, as key-value matches will fail with incorrectly decoded payload\n    * @param pubkey_modulus_limbs: RSA public key modulus limbs (2048-bit split into 18 limbs)\n    * @param redc_params_limbs: RSA reduction parameters limbs\n    * @param signature_limbs: RSA signature limbs\n    **/\n    pub fn init_with_partial_hash(\n        partial_data: BoundedVec<u8, DATA_LENGTH>,\n        partial_hash: [u32; 8],\n        full_data_length: u32,\n        b64_offset: u32,\n        pubkey_modulus_limbs: [Field; 18],\n        redc_params_limbs: [Field; 18],\n        signature_limbs: [Field; 18],\n    ) -> JWT<DATA_LENGTH> {\n        assert(partial_data.len() <= DATA_LENGTH, \"partial_data length is too long\");\n\n        JWT {\n            data: partial_data,\n            full_data_length,\n            partial_hash,\n            b64_offset,\n            pubkey_modulus_limbs,\n            redc_params_limbs,\n            signature_limbs,\n            is_partial_hash: true,\n        }\n    }\n\n    /**\n    * @brief Verify JWT signature with RSA 2048/SHA256\n    **/\n    pub fn verify(self) {\n        let mut data_hash: [u8; 32] = [0; 32];\n\n        if (!self.is_partial_hash) {\n            // Hash the data using SHA256\n            data_hash = sha256_var(self.data.storage(), self.data.len() as u64);\n        } else {\n            // Compute the full SHA256 hash with the partial hash\n            data_hash = partial_sha256_var_end(\n                self.partial_hash,\n                self.data.storage(),\n                self.data.len() as u64,\n                self.full_data_length as u64,\n            );\n        }\n\n        // Verify RSA signature\n        let params: BigNumParams<18, 2048> =\n            BigNumParams::new(false, self.pubkey_modulus_limbs, self.redc_params_limbs);\n\n        let signature: RBN2048 = RuntimeBigNum::from_array(params, self.signature_limbs);\n\n        assert(verify_sha256_pkcs1v15(data_hash, signature, 65537));\n    }\n\n    /**\n    * @brief Checks if a key-value pair exists in the JWT payload\n    *\n    * PAYLOAD_RANGE is the index in the base64 encoded payload (from the b64_offset) up to which we will look for the key:value pair.\n    * This essentially means that everything from b64_offset to PAYLOAD_RANGE should be a valid base64 character, and the key:value\n    * pair should be present in this range.\n    * This is necessary now due to a limitation in base64.\n    **/\n    pub fn validate_key_value<let PAYLOAD_RANGE: u32, let KEY_LENGTH: u32, let MAX_VALUE_LENGTH: u32>(\n        self,\n        key: [u8; KEY_LENGTH],\n        value: BoundedVec<u8, MAX_VALUE_LENGTH>,\n    ) {\n        assert(PAYLOAD_RANGE % 4 == 0, \"PAYLOAD_RANGE should be a multiple of 4 to be a valid base64 chunk\");\n        assert(PAYLOAD_RANGE <= (self.data.len() - self.b64_offset), \"PAYLOAD_RANGE should be less than data length\");\n        assert(value.len() <= MAX_VALUE_LENGTH, \"value length is too long\");\n\n        // Prepare base64 payload to decode\n        // Only in partial sha - shift input chars by offset so the partial data is base64 decodable (multiple of 4)\n        let mut payload_b64: [u8; PAYLOAD_RANGE] = [0; PAYLOAD_RANGE];\n        for i in 0..PAYLOAD_RANGE {\n            payload_b64[i] = self.data.storage()[(i + self.b64_offset)];\n        }\n\n        // Decode base64 and prepare a haystack for substring matching in validate_key_value() with decoded payload\n        let payload: [u8; (PAYLOAD_RANGE / 4 * 3)] = BASE64_URL_DECODER.decode(payload_b64); // b64 decoded length is ceil(DATA_LENGTH / 3) * 4\n\n        // StringBody is constructed with <ceil(length / 31) * 31, ceil(length / 31), length>\n        let haystack: StringBody<(((PAYLOAD_RANGE / 4 * 3) + 31) / 31) * 31, ((PAYLOAD_RANGE / 4 * 3) + 31) / 31, (PAYLOAD_RANGE / 4 * 3)> =\n            StringBody::new(payload, payload.len());\n\n        // Search for \"$key\":\"$value and assert the character after match is a `\"`\n        // json_key = \"$key\":\"\n        let mut json_key: [u8; KEY_LENGTH + 4] = [0; KEY_LENGTH + 4]; // +4 is for two quotes and two colon\n        json_key[0] = 34; // \"\n        for i in 0..KEY_LENGTH {\n            json_key[i + 1] = key[i];\n        }\n        json_key[KEY_LENGTH + 1] = 34; // \"\n        json_key[KEY_LENGTH + 2] = 58; // :\n        json_key[KEY_LENGTH + 3] = 34; // \"\n\n        // SubString is constructed with <ceil(length / 31) * 31, length / 31, length>\n        // length = KEY_LENGTH + 3\n        let json_key_substring: SubString<((KEY_LENGTH + 4 + 31) / 31) * 31, (KEY_LENGTH + 4) / 31, KEY_LENGTH + 4> =\n            SubString::new(json_key, json_key.len());\n        \n        // value length = KEY_LENGTH + 3 + MAX_VALUE_LENGTH\n        let value_substring: SubString<((KEY_LENGTH + 4 + MAX_VALUE_LENGTH + 31) / 31) * 31, (KEY_LENGTH + 4 + MAX_VALUE_LENGTH) / 31, KEY_LENGTH + 4 + MAX_VALUE_LENGTH> =\n            SubString::new(value.storage(), value.len());\n\n        // Concatenate json_key_substring and value_substring to form the search term\n        let needle = json_key_substring.concat_into(value_substring);\n\n        let (match, position): (bool, u32) = haystack.substring_match(needle);\n        assert(match, \"key value pair not found\");\n\n        // Assert the value after search term is a `\"`\n        assert(payload[position + needle.len()] == 34, \"incorrect value\");\n    }\n}\n","path":"/Users/saleel/nargo/github.com/saleel/noir-jwtv0.2.0/src/lib.nr"},"72":{"source":"use super::defaults::BASE64_PADDING_CHAR;\n\npub global STANDARD = Base64DecodeBE::new(true);\npub global STANDARD_NO_PAD = Base64DecodeBE::new(false);\npub global URL_SAFE = Base64DecodeBE::base64url(false);\npub global URL_SAFE_WITH_PAD = Base64DecodeBE::base64url(true);\n\nglobal INVALID_VALUE: u8 = 255;\nstruct Base64DecodeBE {\n    // for some reason, if the lookup table is not defined in a struct, access costs are expensive and ROM tables aren't being used :/\n    table: [u8; 256],\n    pad: bool,\n}\nimpl Base64DecodeBE {\n    /// Creates a new decoder that uses the standard Base64 Alphabet (base64) specified in RFC 4648\n    /// https://datatracker.ietf.org/doc/html/rfc4648#section-4\n    fn new(pad: bool) -> Self {\n        Base64DecodeBE {\n            table: [\n                // 0-42\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                62, // 43\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE, // 44-46\n                63, // 47\n                52,\n                53,\n                54,\n                55,\n                56,\n                57,\n                58,\n                59,\n                60,\n                61, // 48-57\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE, // 58-64\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9,\n                10,\n                11,\n                12,\n                13,\n                14,\n                15,\n                16,\n                17,\n                18,\n                19,\n                20,\n                21,\n                22,\n                23,\n                24,\n                25, // 65-90 (A-Z)\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE, // 91-96\n                26,\n                27,\n                28,\n                29,\n                30,\n                31,\n                32,\n                33,\n                34,\n                35,\n                36,\n                37,\n                38,\n                39,\n                40,\n                41,\n                42,\n                43,\n                44,\n                45,\n                46,\n                47,\n                48,\n                49,\n                50,\n                51, // 97-122 (a-z)\n                // 123-255\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n            ],\n            pad,\n        }\n    }\n\n    // Creates a new decoder that uses the URL and Filename Safe Alphabet specified in RFC 4648\n    // https://datatracker.ietf.org/doc/html/rfc4648#section-5\n    fn base64url(pad: bool) -> Self {\n        Base64DecodeBE {\n            table: [\n                // 0-44 (no mapping)\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                62, // 45 (-)\n                INVALID_VALUE,\n                INVALID_VALUE, // 46-47 (no mapping)\n                52,\n                53,\n                54,\n                55,\n                56,\n                57,\n                58,\n                59,\n                60,\n                61, // 48-57 (0-9)\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE, // 58-64 (no mapping)\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9,\n                10,\n                11,\n                12,\n                13,\n                14,\n                15,\n                16,\n                17,\n                18,\n                19,\n                20,\n                21,\n                22,\n                23,\n                24,\n                25, // 65-90 (A-Z)\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE, // 91-94 (no mapping)\n                63, // 95 (_)\n                INVALID_VALUE, // 96 (no mapping)\n                26,\n                27,\n                28,\n                29,\n                30,\n                31,\n                32,\n                33,\n                34,\n                35,\n                36,\n                37,\n                38,\n                39,\n                40,\n                41,\n                42,\n                43,\n                44,\n                45,\n                46,\n                47,\n                48,\n                49,\n                50,\n                51, // 97-122 (a-z)\n                // 123-255\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n            ],\n            pad,\n        }\n    }\n\n    fn get(self, idx: Field) -> u8 {\n        self.table[idx]\n    }\n\n    /**\n    * @brief Take an array of ASCII values and convert into *packed* byte array of base64 values\n    *        Each Base64 value is 6 bits. This method will produce a byte array where data is concatenated so that there are no sparse bits\n    *        (e.g. encoding 4 ASCII values produces 24 bits of Base64 data = 3 bytes of output data)\n    **/\n    pub fn decode<let InputElements: u32, let OutputBytes: u32>(\n        self,\n        input: [u8; InputElements],\n    ) -> [u8; OutputBytes] {\n        let rem = OutputBytes % 3;\n        // Calculate the number of padding characters and the length of the input without padding\n        let num_padding_chars = if rem == 1 {\n            2\n        } else if rem == 2 {\n            1\n        } else {\n            0\n        };\n\n        // Assert that the output length & input length are correct\n        // Every 3 output chars will be encoded as 4 base64 input chars\n        let encoded_length = (OutputBytes + 2) / 3 * 4; // ceil(input * 4 / 3)\n        if self.pad {\n            assert(\n                encoded_length == InputElements,\n                f\"DecodeError: invalid input length for specified output length. Expected {encoded_length} input elements, but got {InputElements}.\",\n            );\n            // enforce Base64 padding is valid\n            if num_padding_chars == 2 {\n                assert(input[InputElements - 1] == BASE64_PADDING_CHAR);\n                assert(input[InputElements - 2] == BASE64_PADDING_CHAR);\n            } else if num_padding_chars == 1 {\n                assert(input[InputElements - 1] == BASE64_PADDING_CHAR);\n            }\n        } else {\n            let expected = encoded_length - num_padding_chars;\n            assert(\n                encoded_length - num_padding_chars == InputElements,\n                f\"DecodeError: invalid input length for specified output length. Expected {expected} input elements, but got {InputElements}.\",\n            );\n        }\n\n        // 240 bits fits 40 6-bit chunks and 30 8-bit chunks\n        // we pack 40 base64 values into a field element and convert into 30 bytes\n        // TODO: once we support arithmetic ops on generics, derive OutputBytes from InputBytes\n        let mut result: [u8; OutputBytes] = [0; OutputBytes];\n        let BASE64_ELEMENTS_PER_CHUNK: u32 = 40;\n        let BYTES_PER_CHUNK: u32 = 30;\n        let num_chunks = (InputElements / BASE64_ELEMENTS_PER_CHUNK)\n            + (InputElements % BASE64_ELEMENTS_PER_CHUNK != 0) as u32;\n\n        if num_chunks > 0 {\n            let final_chunk = num_chunks - 1;\n\n            for i in 0..final_chunk {\n                let mut slice: Field = 0;\n                for j in 0..BASE64_ELEMENTS_PER_CHUNK {\n                    slice *= 64;\n                    let offset = i * BASE64_ELEMENTS_PER_CHUNK + j;\n                    let input_byte = input[offset];\n                    let decoded = self.get(input_byte as Field);\n                    assert(\n                        decoded != INVALID_VALUE,\n                        f\"DecodeError: invalid symbol {input_byte}, offset {offset}.\",\n                    );\n                    slice += decoded as Field;\n                }\n                let slice_bytes: [u8; 30] = slice.to_be_bytes();\n                for j in 0..BYTES_PER_CHUNK {\n                    result[i * BYTES_PER_CHUNK + j] = slice_bytes[j];\n                }\n            }\n\n            // process the final chunk, which may contain padding\n            let base64_offset: u32 = final_chunk * BASE64_ELEMENTS_PER_CHUNK;\n            let byte_offset = final_chunk * BYTES_PER_CHUNK;\n            let base64_elements_in_final_chunk = if self.pad {\n                InputElements - base64_offset - num_padding_chars\n            } else {\n                InputElements - base64_offset\n            };\n\n            // pack the base64 values into the field element\n            let mut slice: Field = 0;\n            for j in 0..base64_elements_in_final_chunk {\n                slice *= 64;\n                let offset = base64_offset + j;\n                let input_byte = input[offset];\n                let decoded = self.get(input_byte as Field);\n                assert(\n                    decoded != INVALID_VALUE,\n                    f\"DecodeError: invalid symbol {input_byte}, offset {offset}.\",\n                );\n                slice += decoded as Field;\n            }\n            for _ in base64_elements_in_final_chunk..BASE64_ELEMENTS_PER_CHUNK {\n                slice *= 64;\n            }\n\n            // TODO: check is it cheaper to use a constant value in `to_be_bytes` or can we use `bytes_in_final_chunk`?\n            // extract the bytes from the Field element\n            let slice_bytes: [u8; 30] = slice.to_be_bytes();\n            let num_bytes_in_final_chunk = OutputBytes - byte_offset;\n            for i in 0..num_bytes_in_final_chunk {\n                result[byte_offset + i] = slice_bytes[i];\n            }\n        }\n\n        result\n    }\n}\n\n#[test]\nfn test_decode_empty() {\n    let input: [u8; 0] = [];\n    let expected: [u8; 0] = [];\n    let result = STANDARD.decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_padding() {\n    // f\n    let input: [u8; 4] = [90, 103, 61, 61];\n    let expected: [u8; 1] = [102];\n    let result = STANDARD.decode(input);\n\n    assert(result == expected);\n\n    // fo\n    let input: [u8; 4] = [90, 109, 56, 61];\n    let expected: [u8; 2] = [102, 111];\n    let result = STANDARD.decode(input);\n\n    assert(result == expected);\n\n    // foo\n    let input: [u8; 4] = [90, 109, 57, 118];\n    let expected: [u8; 3] = [102, 111, 111];\n    let result = STANDARD.decode(input);\n\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_standard_no_pad() {\n    // f\n    let input: [u8; 2] = [90, 103];\n    let expected: [u8; 1] = [102];\n    let result = STANDARD_NO_PAD.decode(input);\n\n    assert(result == expected);\n\n    // fo\n    let input: [u8; 3] = [90, 109, 56];\n    let expected: [u8; 2] = [102, 111];\n    let result = STANDARD_NO_PAD.decode(input);\n\n    assert(result == expected);\n\n    // foo\n    let input: [u8; 4] = [90, 109, 57, 118];\n    let expected: [u8; 3] = [102, 111, 111];\n    let result = STANDARD_NO_PAD.decode(input);\n\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_max_byte() {\n    let expected: [u8; 1] = [255];\n\n    let input: [u8; 4] = [47, 119, 61, 61]; // \"/w==\"\n    let result: [u8; 1] = STANDARD.decode(input);\n    assert(result == expected);\n\n    let input: [u8; 2] = [47, 119]; // \"/w\"\n    let result: [u8; 1] = STANDARD_NO_PAD.decode(input);\n    assert(result == expected);\n\n    let input: [u8; 4] = [95, 119, 61, 61]; // \"_w==\"\n    let result: [u8; 1] = URL_SAFE_WITH_PAD.decode(input);\n    assert(result == expected);\n\n    let input: [u8; 2] = [95, 119]; // \"_w\"\n    let result: [u8; 1] = URL_SAFE.decode(input);\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid symbol 255, offset 0\")]\nfn test_decode_invalid() {\n    let input: [u8; 2] = [255, 255];\n    let _: [u8; 1] = STANDARD_NO_PAD.decode(input);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid input length for specified output length. Expected 3 input elements, but got 4.\")]\nfn test_decode_standard_no_pad_fail_with_padding() {\n    // test decoding / and +\n    let input: [u8; 4] = [47, 43, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = STANDARD_NO_PAD.decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_standard() {\n    // test decoding / and +\n    let input: [u8; 4] = [47, 43, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = STANDARD.decode(input);\n\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid symbol 95, offset 0\")]\nfn test_decode_underscore_with_standard() {\n    // test decoding _ and -\n    let input: [u8; 4] = [95, 45, 65, 61];\n    let _: [u8; 2] = STANDARD.decode(input);\n}\n\n#[test]\nfn test_decode_url_safe_with_pad() {\n    // test decoding _ and -\n    let input: [u8; 4] = [95, 45, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = URL_SAFE_WITH_PAD.decode(input);\n\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid symbol 47, offset 0\")]\nfn test_decode_slash_with_url_safe() {\n    // test decoding / and +\n    let input: [u8; 3] = [47, 43, 65];\n    let _: [u8; 2] = URL_SAFE.decode(input);\n}\n\n#[test]\nfn test_decode_url_safe() {\n    // test decoding _ and -\n    let input: [u8; 3] = [95, 45, 65];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = URL_SAFE.decode(input);\n\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid input length for specified output length. Expected 3 input elements, but got 4.\")]\nfn test_decode_url_safe_no_pad_fail_with_padding() {\n    // test decoding _ and -\n    let input: [u8; 4] = [95, 45, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = URL_SAFE.decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_ascii() {\n    // base64: SGVsbG8gV29ybGQh\n    let input: [u8; 16] = [83, 71, 86, 115, 98, 71, 56, 103, 86, 50, 57, 121, 98, 71, 81, 104];\n    // \"Hello World!\"\n    let expected: [u8; 12] = [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33];\n\n    // all configurations should decode the same way\n    let result: [u8; 12] = STANDARD.decode(input);\n    assert(result == expected);\n    let result: [u8; 12] = STANDARD_NO_PAD.decode(input);\n    assert(result == expected);\n    let result: [u8; 12] = URL_SAFE_WITH_PAD.decode(input);\n    assert(result == expected);\n    let result: [u8; 12] = URL_SAFE.decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_utf8() {\n    // base64: 44GT44KT44Gr44Gh44Gv44CB5LiW55WM77yB\n    let input: [u8; 36] = [\n        52, 52, 71, 84, 52, 52, 75, 84, 52, 52, 71, 114, 52, 52, 71, 104, 52, 52, 71, 118, 52, 52,\n        67, 66, 53, 76, 105, 87, 53, 53, 87, 77, 55, 55, 121, 66,\n    ];\n    // non-ascii utf-8: \"Hello, World!\" in Japanese\n    let expected: [u8; 27] = [\n        227, 129, 147, 227, 130, 147, 227, 129, 171, 227, 129, 161, 227, 129, 175, 227, 128, 129,\n        228, 184, 150, 231, 149, 140, 239, 188, 129,\n    ];\n\n    // all configurations should decode the same way\n    let result: [u8; 27] = STANDARD.decode(input);\n    assert(result == expected);\n    let result: [u8; 27] = STANDARD_NO_PAD.decode(input);\n    assert(result == expected);\n    let result: [u8; 27] = URL_SAFE_WITH_PAD.decode(input);\n    assert(result == expected);\n    let result: [u8; 27] = URL_SAFE.decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_multi_chunks() {\n    let expected = \"The quick brown fox jumps over the lazy dog, while 42 ravens perch atop a rusty mailbox. Zany quilters fabricate 9 cozy blankets, as 3 jovial wizards expertly mix 5 potent elixirs. Bright neon signs flash \\\"OPEN 24/7\\\" in the misty night air, illuminating 8 vintage cars parked along Main Street. A gentle breeze carries the aroma of fresh coffee and warm cinnamon rolls from Joe's Diner, enticing 6 sleepy truckers to stop for a late-night snack. Meanwhile, 11 mischievous kittens playfully chase a ball of yarn across Mrs. Johnson's porch, their antics observed by 2 wise old owls perched on a nearby oak tree.\";\n\n    let input: [u8; 816] = [\n        86, 71, 104, 108, 73, 72, 70, 49, 97, 87, 78, 114, 73, 71, 74, 121, 98, 51, 100, 117, 73,\n        71, 90, 118, 101, 67, 66, 113, 100, 87, 49, 119, 99, 121, 66, 118, 100, 109, 86, 121, 73,\n        72, 82, 111, 90, 83, 66, 115, 89, 88, 112, 53, 73, 71, 82, 118, 90, 121, 119, 103, 100, 50,\n        104, 112, 98, 71, 85, 103, 78, 68, 73, 103, 99, 109, 70, 50, 90, 87, 53, 122, 73, 72, 66,\n        108, 99, 109, 78, 111, 73, 71, 70, 48, 98, 51, 65, 103, 89, 83, 66, 121, 100, 88, 78, 48,\n        101, 83, 66, 116, 89, 87, 108, 115, 89, 109, 57, 52, 76, 105, 66, 97, 89, 87, 53, 53, 73,\n        72, 70, 49, 97, 87, 120, 48, 90, 88, 74, 122, 73, 71, 90, 104, 89, 110, 74, 112, 89, 50, 70,\n        48, 90, 83, 65, 53, 73, 71, 78, 118, 101, 110, 107, 103, 89, 109, 120, 104, 98, 109, 116,\n        108, 100, 72, 77, 115, 73, 71, 70, 122, 73, 68, 77, 103, 97, 109, 57, 50, 97, 87, 70, 115,\n        73, 72, 100, 112, 101, 109, 70, 121, 90, 72, 77, 103, 90, 88, 104, 119, 90, 88, 74, 48, 98,\n        72, 107, 103, 98, 87, 108, 52, 73, 68, 85, 103, 99, 71, 57, 48, 90, 87, 53, 48, 73, 71, 86,\n        115, 97, 88, 104, 112, 99, 110, 77, 117, 73, 69, 74, 121, 97, 87, 100, 111, 100, 67, 66,\n        117, 90, 87, 57, 117, 73, 72, 78, 112, 90, 50, 53, 122, 73, 71, 90, 115, 89, 88, 78, 111,\n        73, 67, 74, 80, 85, 69, 86, 79, 73, 68, 73, 48, 76, 122, 99, 105, 73, 71, 108, 117, 73, 72,\n        82, 111, 90, 83, 66, 116, 97, 88, 78, 48, 101, 83, 66, 117, 97, 87, 100, 111, 100, 67, 66,\n        104, 97, 88, 73, 115, 73, 71, 108, 115, 98, 72, 86, 116, 97, 87, 53, 104, 100, 71, 108, 117,\n        90, 121, 65, 52, 73, 72, 90, 112, 98, 110, 82, 104, 90, 50, 85, 103, 89, 50, 70, 121, 99,\n        121, 66, 119, 89, 88, 74, 114, 90, 87, 81, 103, 89, 87, 120, 118, 98, 109, 99, 103, 84, 87,\n        70, 112, 98, 105, 66, 84, 100, 72, 74, 108, 90, 88, 81, 117, 73, 69, 69, 103, 90, 50, 86,\n        117, 100, 71, 120, 108, 73, 71, 74, 121, 90, 87, 86, 54, 90, 83, 66, 106, 89, 88, 74, 121,\n        97, 87, 86, 122, 73, 72, 82, 111, 90, 83, 66, 104, 99, 109, 57, 116, 89, 83, 66, 118, 90,\n        105, 66, 109, 99, 109, 86, 122, 97, 67, 66, 106, 98, 50, 90, 109, 90, 87, 85, 103, 89, 87,\n        53, 107, 73, 72, 100, 104, 99, 109, 48, 103, 89, 50, 108, 117, 98, 109, 70, 116, 98, 50, 52,\n        103, 99, 109, 57, 115, 98, 72, 77, 103, 90, 110, 74, 118, 98, 83, 66, 75, 98, 50, 85, 110,\n        99, 121, 66, 69, 97, 87, 53, 108, 99, 105, 119, 103, 90, 87, 53, 48, 97, 87, 78, 112, 98,\n        109, 99, 103, 78, 105, 66, 122, 98, 71, 86, 108, 99, 72, 107, 103, 100, 72, 74, 49, 89, 50,\n        116, 108, 99, 110, 77, 103, 100, 71, 56, 103, 99, 51, 82, 118, 99, 67, 66, 109, 98, 51, 73,\n        103, 89, 83, 66, 115, 89, 88, 82, 108, 76, 87, 53, 112, 90, 50, 104, 48, 73, 72, 78, 117,\n        89, 87, 78, 114, 76, 105, 66, 78, 90, 87, 70, 117, 100, 50, 104, 112, 98, 71, 85, 115, 73,\n        68, 69, 120, 73, 71, 49, 112, 99, 50, 78, 111, 97, 87, 86, 50, 98, 51, 86, 122, 73, 71, 116,\n        112, 100, 72, 82, 108, 98, 110, 77, 103, 99, 71, 120, 104, 101, 87, 90, 49, 98, 71, 120, 53,\n        73, 71, 78, 111, 89, 88, 78, 108, 73, 71, 69, 103, 89, 109, 70, 115, 98, 67, 66, 118, 90,\n        105, 66, 53, 89, 88, 74, 117, 73, 71, 70, 106, 99, 109, 57, 122, 99, 121, 66, 78, 99, 110,\n        77, 117, 73, 69, 112, 118, 97, 71, 53, 122, 98, 50, 52, 110, 99, 121, 66, 119, 98, 51, 74,\n        106, 97, 67, 119, 103, 100, 71, 104, 108, 97, 88, 73, 103, 89, 87, 53, 48, 97, 87, 78, 122,\n        73, 71, 57, 105, 99, 50, 86, 121, 100, 109, 86, 107, 73, 71, 74, 53, 73, 68, 73, 103, 100,\n        50, 108, 122, 90, 83, 66, 118, 98, 71, 81, 103, 98, 51, 100, 115, 99, 121, 66, 119, 90, 88,\n        74, 106, 97, 71, 86, 107, 73, 71, 57, 117, 73, 71, 69, 103, 98, 109, 86, 104, 99, 109, 74,\n        53, 73, 71, 57, 104, 97, 121, 66, 48, 99, 109, 86, 108, 76, 103, 61, 61,\n    ];\n    let result: [u8; 610] = STANDARD.decode(input);\n    assert(result == expected.as_bytes());\n\n    let input: [u8; 814] = [\n        86, 71, 104, 108, 73, 72, 70, 49, 97, 87, 78, 114, 73, 71, 74, 121, 98, 51, 100, 117, 73,\n        71, 90, 118, 101, 67, 66, 113, 100, 87, 49, 119, 99, 121, 66, 118, 100, 109, 86, 121, 73,\n        72, 82, 111, 90, 83, 66, 115, 89, 88, 112, 53, 73, 71, 82, 118, 90, 121, 119, 103, 100, 50,\n        104, 112, 98, 71, 85, 103, 78, 68, 73, 103, 99, 109, 70, 50, 90, 87, 53, 122, 73, 72, 66,\n        108, 99, 109, 78, 111, 73, 71, 70, 48, 98, 51, 65, 103, 89, 83, 66, 121, 100, 88, 78, 48,\n        101, 83, 66, 116, 89, 87, 108, 115, 89, 109, 57, 52, 76, 105, 66, 97, 89, 87, 53, 53, 73,\n        72, 70, 49, 97, 87, 120, 48, 90, 88, 74, 122, 73, 71, 90, 104, 89, 110, 74, 112, 89, 50, 70,\n        48, 90, 83, 65, 53, 73, 71, 78, 118, 101, 110, 107, 103, 89, 109, 120, 104, 98, 109, 116,\n        108, 100, 72, 77, 115, 73, 71, 70, 122, 73, 68, 77, 103, 97, 109, 57, 50, 97, 87, 70, 115,\n        73, 72, 100, 112, 101, 109, 70, 121, 90, 72, 77, 103, 90, 88, 104, 119, 90, 88, 74, 48, 98,\n        72, 107, 103, 98, 87, 108, 52, 73, 68, 85, 103, 99, 71, 57, 48, 90, 87, 53, 48, 73, 71, 86,\n        115, 97, 88, 104, 112, 99, 110, 77, 117, 73, 69, 74, 121, 97, 87, 100, 111, 100, 67, 66,\n        117, 90, 87, 57, 117, 73, 72, 78, 112, 90, 50, 53, 122, 73, 71, 90, 115, 89, 88, 78, 111,\n        73, 67, 74, 80, 85, 69, 86, 79, 73, 68, 73, 48, 76, 122, 99, 105, 73, 71, 108, 117, 73, 72,\n        82, 111, 90, 83, 66, 116, 97, 88, 78, 48, 101, 83, 66, 117, 97, 87, 100, 111, 100, 67, 66,\n        104, 97, 88, 73, 115, 73, 71, 108, 115, 98, 72, 86, 116, 97, 87, 53, 104, 100, 71, 108, 117,\n        90, 121, 65, 52, 73, 72, 90, 112, 98, 110, 82, 104, 90, 50, 85, 103, 89, 50, 70, 121, 99,\n        121, 66, 119, 89, 88, 74, 114, 90, 87, 81, 103, 89, 87, 120, 118, 98, 109, 99, 103, 84, 87,\n        70, 112, 98, 105, 66, 84, 100, 72, 74, 108, 90, 88, 81, 117, 73, 69, 69, 103, 90, 50, 86,\n        117, 100, 71, 120, 108, 73, 71, 74, 121, 90, 87, 86, 54, 90, 83, 66, 106, 89, 88, 74, 121,\n        97, 87, 86, 122, 73, 72, 82, 111, 90, 83, 66, 104, 99, 109, 57, 116, 89, 83, 66, 118, 90,\n        105, 66, 109, 99, 109, 86, 122, 97, 67, 66, 106, 98, 50, 90, 109, 90, 87, 85, 103, 89, 87,\n        53, 107, 73, 72, 100, 104, 99, 109, 48, 103, 89, 50, 108, 117, 98, 109, 70, 116, 98, 50, 52,\n        103, 99, 109, 57, 115, 98, 72, 77, 103, 90, 110, 74, 118, 98, 83, 66, 75, 98, 50, 85, 110,\n        99, 121, 66, 69, 97, 87, 53, 108, 99, 105, 119, 103, 90, 87, 53, 48, 97, 87, 78, 112, 98,\n        109, 99, 103, 78, 105, 66, 122, 98, 71, 86, 108, 99, 72, 107, 103, 100, 72, 74, 49, 89, 50,\n        116, 108, 99, 110, 77, 103, 100, 71, 56, 103, 99, 51, 82, 118, 99, 67, 66, 109, 98, 51, 73,\n        103, 89, 83, 66, 115, 89, 88, 82, 108, 76, 87, 53, 112, 90, 50, 104, 48, 73, 72, 78, 117,\n        89, 87, 78, 114, 76, 105, 66, 78, 90, 87, 70, 117, 100, 50, 104, 112, 98, 71, 85, 115, 73,\n        68, 69, 120, 73, 71, 49, 112, 99, 50, 78, 111, 97, 87, 86, 50, 98, 51, 86, 122, 73, 71, 116,\n        112, 100, 72, 82, 108, 98, 110, 77, 103, 99, 71, 120, 104, 101, 87, 90, 49, 98, 71, 120, 53,\n        73, 71, 78, 111, 89, 88, 78, 108, 73, 71, 69, 103, 89, 109, 70, 115, 98, 67, 66, 118, 90,\n        105, 66, 53, 89, 88, 74, 117, 73, 71, 70, 106, 99, 109, 57, 122, 99, 121, 66, 78, 99, 110,\n        77, 117, 73, 69, 112, 118, 97, 71, 53, 122, 98, 50, 52, 110, 99, 121, 66, 119, 98, 51, 74,\n        106, 97, 67, 119, 103, 100, 71, 104, 108, 97, 88, 73, 103, 89, 87, 53, 48, 97, 87, 78, 122,\n        73, 71, 57, 105, 99, 50, 86, 121, 100, 109, 86, 107, 73, 71, 74, 53, 73, 68, 73, 103, 100,\n        50, 108, 122, 90, 83, 66, 118, 98, 71, 81, 103, 98, 51, 100, 115, 99, 121, 66, 119, 90, 88,\n        74, 106, 97, 71, 86, 107, 73, 71, 57, 117, 73, 71, 69, 103, 98, 109, 86, 104, 99, 109, 74,\n        53, 73, 71, 57, 104, 97, 121, 66, 48, 99, 109, 86, 108, 76, 103,\n    ];\n    let result = STANDARD_NO_PAD.decode(input);\n    assert(result == expected.as_bytes());\n}\n\n#[test]\nfn test_decode_with_padding() {\n    // Raw bh: GxMlgwLiypnVrE2C0Sf4yzhcWTkAhSZ5+WERhKhXtlU=\n    // Translated directly to ASCII\n    let input: [u8; 44] = [\n        71, 120, 77, 108, 103, 119, 76, 105, 121, 112, 110, 86, 114, 69, 50, 67, 48, 83, 102, 52,\n        121, 122, 104, 99, 87, 84, 107, 65, 104, 83, 90, 53, 43, 87, 69, 82, 104, 75, 104, 88, 116,\n        108, 85, 61,\n    ];\n\n    let result: [u8; 32] = STANDARD.decode(input);\n    let expected: [u8; 32] = [\n        27, 19, 37, 131, 2, 226, 202, 153, 213, 172, 77, 130, 209, 39, 248, 203, 56, 92, 89, 57, 0,\n        133, 38, 121, 249, 97, 17, 132, 168, 87, 182, 85,\n    ];\n    assert(result == expected);\n}\n","path":"/Users/saleel/nargo/github.com/noir-lang/noir_base64v0.3.0/src/decoder.nr"},"75":{"source":"use crate::utils::u60_representation::U60Repr;\n\npub struct BigNumParams<let N: u32, let MOD_BITS: u32> {\n    pub has_multiplicative_inverse: bool,\n\n    // @brief modulus: all BigNum operations are evaluated modulo this value\n    pub modulus: [Field; N],\n\n    // @brief modulus but represented in a U60Repr form\n    pub modulus_u60: U60Repr<N, 2>,\n    pub modulus_u60_x4: U60Repr<N, 4>,\n\n    // @brief double_modulus: used when performing negations and subtractions\n    pub double_modulus: [Field; N],\n\n    // @brief redc_param used for __barrett_reduction. See https://en.wikipedia.org/wiki/Barrett_reduction\n    pub redc_param: [Field; N],\n}\n\n// To be implemented by the user for any BigNum they define, or within the predefined BigNums in the `fields/` dir.\npub trait BigNumParamsGetter<let N: u32, let MOD_BITS: u32> {\n    pub fn get_params() -> BigNumParams<N, MOD_BITS>;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> BigNumParams<N, MOD_BITS> {\n    pub fn new(\n        has_multiplicative_inverse: bool,\n        modulus: [Field; N],\n        redc_param: [Field; N],\n    ) -> Self {\n        Self {\n            has_multiplicative_inverse,\n            modulus,\n            modulus_u60: U60Repr::from(modulus),\n            modulus_u60_x4: U60Repr::from(modulus),\n            double_modulus: get_double_modulus(modulus),\n            redc_param,\n        }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for BigNumParams<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        (self.has_multiplicative_inverse == other.has_multiplicative_inverse)\n            & (self.modulus == other.modulus)\n            & (self.modulus_u60 == other.modulus_u60)\n            & (self.modulus_u60_x4 == other.modulus_u60_x4)\n            & (self.double_modulus == other.double_modulus)\n            & (self.redc_param == other.redc_param)\n    }\n}\n\nfn get_double_modulus<let N: u32>(modulus: [Field; N]) -> [Field; N] {\n    let TWO_POW_120: Field = 0x1000000000000000000000000000000;\n    let m: U60Repr<N, 2> = U60Repr::from(modulus);\n    let mut result: [Field; N] = U60Repr::into(m + m);\n\n    result[0] += TWO_POW_120;\n    for i in 1..N - 1 {\n        result[i] += (TWO_POW_120 - 1);\n    }\n    result[N - 1] -= 1;\n    result\n}\n","path":"/Users/saleel/nargo/github.com/noir-lang/noir-bignumv0.4.1/src/params.nr"},"76":{"source":"use crate::utils::split_bits;\n\nuse crate::fns::{\n    constrained_ops::validate_quotient_in_range, unconstrained_helpers::__barrett_reduction,\n};\nuse crate::params::BigNumParams as P;\n\n/**\n * In this file:\n *\n * __compute_quadratic_expression_with_borrow_flags\n * __add_linear_expression\n * __compute_quadratic_expression_product\n * __compute_quadratic_expression\n * evaluate_quadratic_expression\n */\n\n/**\n* @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n* @description The expression is of the form:\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n* For example, when computing the product a * b - q * p = 0, it is possible that:\n*      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n*      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n* In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n* In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n*\n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\nunconstrained fn __compute_quadratic_expression_with_borrow_flags<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([Field; N], [Field; N], [Field; 2 * N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut mulout_p = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut mulout_n: [Field; 2 * N] = [0; 2 * N];\n    let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout_p, 2 * N);\n\n    let modulus: [Field; N] = params.modulus;\n    let modulus_bits = MOD_BITS;\n    let (quotient, remainder) = __barrett_reduction(\n        relation_result,\n        params.redc_param,\n        modulus_bits,\n        modulus,\n        params.modulus_u60_x4,\n    );\n    println(remainder);\n    assert(remainder == [0; N]);\n\n    for i in 0..N {\n        for j in 0..N {\n            mulout_n[i + j] += quotient[i] * modulus[j];\n        }\n    }\n\n    // compute borrow flags from mulout_p and mulout_n\n    let mut borrow_flags: [Field; 2 * N] = [0; 2 * N];\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    let two_pow_120: Field = 0x1000000000000000000000000000000;\n    let downshift: Field = 1 / two_pow_120;\n\n    // determine whether we need to borrow from more significant limbs.\n    // initial limb is \"simple\" comparison operation\n    // TODO: check how expensive `lt` operator is w.r.t. witness generation\n    borrow_flags[0] = mulout_p[0].lt(mulout_n[0]) as Field;\n    // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n    // and there is nothing to borrow against for the final limb.\n    let mut hi_bits = (mulout_p[0] - mulout_n[0] + (borrow_flags[0] * borrow_shift)) * downshift;\n    for i in 1..(N + N - 2) {\n        // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n        // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n        //     * downshift;\n        mulout_p[i] += hi_bits;\n\n        // determine whether negative limb values are greater than positive limb values\n        let underflow: Field =\n            mulout_p[i].lt(mulout_n[i] + (borrow_flags[i - 1] * borrow_carry)) as Field;\n        borrow_flags[i] = underflow;\n\n        hi_bits = (\n            mulout_p[i] - mulout_n[i] + (borrow_flags[i] * borrow_shift)\n                - (borrow_flags[i - 1] * borrow_carry)\n        )\n            * downshift;\n    }\n\n    (quotient, remainder, borrow_flags)\n}\n\n/**\n* @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n**/\n// NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n// To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n// We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n// Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n// Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\nunconstrained fn __add_linear_expression<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]; M],\n    flags: [bool; M],\n) -> ([Field; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut sum: [Field; N] = [0; N];\n    // TODO: ugly! Will fail if input array is empty\n    let modulus2: [Field; N] = params.double_modulus;\n    for i in 0..M {\n        if (flags[i]) {\n            for j in 0..N {\n                sum[j] = sum[j] + modulus2[j] - x[i][j];\n                // assert(x[i][j].lt(modulus2[j]));\n            }\n        } else {\n            for j in 0..N {\n                sum[j] = sum[j] + x[i][j];\n            }\n        }\n    }\n    // problem if we normalize when used in computing quotient\n    sum\n}\n\n/**\n* @brief computes the limb products of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\nunconstrained fn __compute_quadratic_expression_product<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> [Field; 2 * N] {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut lhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut rhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut add: [Field; N] = [0; N];\n\n    for i in 0..NUM_PRODUCTS {\n        lhs[i] = __add_linear_expression(params, lhs_terms[i], lhs_flags[i]);\n        rhs[i] = __add_linear_expression(params, rhs_terms[i], rhs_flags[i]);\n    }\n\n    let add: [Field; N] = __add_linear_expression(params, linear_terms, linear_flags);\n\n    let mut mulout: [Field; 2 * N] = [0; 2 * N];\n\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                mulout[i + j] += (lhs[k][i] * rhs[k][j]);\n            }\n        }\n        mulout[i] += add[i];\n    }\n    mulout\n}\n\n/**\n* @brief computes the quotient/remainder of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\npub(crate) unconstrained fn __compute_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([Field; N], [Field; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mulout = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout, 2 * N);\n\n    // size 4\n    // a[3] * b[3] = a[6] = 7\n    // TODO: ugly! Will fail if input slice is empty\n    let k = MOD_BITS;\n\n    let (quotient, remainder) = __barrett_reduction(\n        relation_result,\n        params.redc_param,\n        k,\n        params.modulus,\n        params.modulus_u60_x4,\n    );\n\n    let mut q = quotient;\n    let mut r = remainder;\n    (q, r)\n}\n\n/**\n* @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n* @description The expression is of the form (when evaluated as an integer relation):\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* Note: this method requires the remainder term of the expression to be ZERO\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The expensive parts of this algorithm are the following:\n*      1. evaluating the limb products required to compute `lhs * rhs`\n*      2. applying range constraints to validate the result is 0\n*\n* Range constraints are needed for the following reason:\n* When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n* Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n* Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n* To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n* (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n* To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n* We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n* TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n* I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n* TODO: explain why we apply a 126-bit range check, this feels like a magic number\n* (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n* TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n* \n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\npub(crate) fn evaluate_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) {\n    // use an unconstrained function to compute the value of the quotient\n    let (quotient, _, borrow_flags): ([Field; N], [Field; N], [Field; 2 * N]) = unsafe {\n        __compute_quadratic_expression_with_borrow_flags::<_, MOD_BITS, _, _, _, _>(\n            params,\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags,\n        )\n    };\n    // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n    // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n    validate_quotient_in_range::<_, MOD_BITS>(quotient);\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    // (should be a compile-time check...unconstrained function?)\n    // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n    let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t4: [Field; N] = [0; N];\n\n    // TODO: this is super nasty as it requires a multiplication\n    let double_modulus: [Field; N] = params.double_modulus;\n    for k in 0..NUM_PRODUCTS {\n        for i in 0..N {\n            for j in 0..LHS_N {\n                // note: if is_negative is not known at comptime this is very expensive\n                if (lhs_flags[k][j]) {\n                    t0[k][i] -= lhs_terms[k][j][i];\n                    t0[k][i] += double_modulus[i];\n                } else {\n                    t0[k][i] += lhs_terms[k][j][i];\n                }\n            }\n            for j in 0..RHS_N {\n                if (rhs_flags[k][j]) {\n                    t1[k][i] -= rhs_terms[k][j][i];\n                    t1[k][i] += double_modulus[i];\n                } else {\n                    t1[k][i] += rhs_terms[k][j][i];\n                }\n            }\n        }\n    }\n    for i in 0..N {\n        for j in 0..ADD_N {\n            if (linear_flags[j]) {\n                t4[i] -= linear_terms[j][i];\n                t4[i] += double_modulus[i];\n            } else {\n                t4[i] += linear_terms[j][i];\n            }\n        }\n    }\n\n    // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n    // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n    // so that we can ensure that no limbs will underflow for an honest Prover\n    let mut product_limbs: [Field; 2 * N] = [0; 2 * N];\n\n    // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n    // TODO: this is super nasty as it requires a multiplication\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                if k == 0 {\n                    let new_term = t0[k][i] * t1[k][j] - quotient[i] * params.modulus[j];\n                    std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                    product_limbs[i + j] += new_term;\n                } else {\n                    product_limbs[i + j] += t0[k][i] * t1[k][j];\n                }\n            }\n            if (NUM_PRODUCTS == 0) {\n                product_limbs[i + j] -= quotient[i] * params.modulus[j];\n            }\n        }\n        product_limbs[i] += t4[i];\n    }\n\n    // each limb product represents the sum of 120-bit products.\n    // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n    // where no more than 64 limb products are summed together.\n    // TODO: check in unconstrained function that this condition is satisfied\n    // TODO: define trade-offs regarding the value of borrow_shift\n    // (the larger the value, the greater the range check that is required on product_limbs)\n    // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n    // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n    //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n    // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n    borrow_flags[0].assert_max_bit_size::<1>();\n    product_limbs[0] += borrow_flags[0] * borrow_shift;\n    for i in 1..(N + N - 2) {\n        borrow_flags[i].assert_max_bit_size::<1>();\n        product_limbs[i] += (borrow_flags[i] * borrow_shift - borrow_flags[i - 1] * borrow_carry);\n    }\n    product_limbs[N + N - 2] -= borrow_flags[N + N - 3] * borrow_carry;\n\n    // Final step: Validate `product_limbs` represents the integer value `0`\n    // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n    // i.e. we need to do the following for each limb `i`:\n    //      1. validate the limb's low-120 bits equals zero\n    //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n    //      3. add the carry into limb `i+1`\n    // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n    // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n    // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n    //  where k is the number of bits in the prime field)\n    // We then add the result into the next limb and repeat.\n    let hi_shift: Field = 0x1000000000000000000000000000000;\n    let hi_downshift: Field = 1 / hi_shift;\n    for i in 0..N + N - 2 {\n        product_limbs[i] *= hi_downshift;\n        std::as_witness(product_limbs[i]);\n        product_limbs[i].assert_max_bit_size::<126>(); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n        product_limbs[i + 1] += product_limbs[i];\n    }\n    // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n    assert(product_limbs[N + N - 2] == 0);\n}\n","path":"/Users/saleel/nargo/github.com/noir-lang/noir-bignumv0.4.1/src/fns/expressions.nr"},"77":{"source":"use crate::params::BigNumParams as P;\n\nuse crate::fns::{\n    expressions::evaluate_quadratic_expression,\n    unconstrained_helpers::{\n        __add_with_flags, __neg_with_flags, __sub_with_flags, __validate_gt_remainder,\n        __validate_in_field_compute_borrow_flags,\n    }, unconstrained_ops::{__div, __mul, __udiv_mod},\n};\n\n/**\n * In this file:\n *\n * conditional_select\n * assert_is_not_equal\n * eq\n * validate_in_field\n * validate_in_range\n * validate_quotient_in_range\n * validate_gt\n * neg\n * add\n * sub\n * mul\n * div\n * udiv_mod\n * udiv\n * umod\n */\n\n/**\n* @brief given an input seed, generate a pseudorandom BigNum value\n* @details we hash the input seed into `modulus_bits * 2` bits of entropy,\n* which is then reduced into a BigNum value\n* We use a hash function that can be modelled as a random oracle\n* This function *should* produce an output that is a uniformly randomly distributed value modulo BigNum::modulus()\n**/\npub(crate) fn derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [Field; N] {\n    let mut rolling_seed: [u8; SeedBytes + 1] = [0; SeedBytes + 1];\n    for i in 0..SeedBytes {\n        rolling_seed[i] = seed[i];\n        assert_eq(rolling_seed[i], seed[i]);\n    }\n\n    let mut hash_buffer: [u8; N * 2 * 15] = [0; N * 2 * 15];\n\n    let mut rolling_hash_fields: [Field; (SeedBytes / 31) + 1] = [0; (SeedBytes / 31) + 1];\n    let mut seed_ptr = 0;\n    for i in 0..(SeedBytes / 31) + 1 {\n        let mut packed: Field = 0;\n        for _ in 0..31 {\n            if (seed_ptr < SeedBytes) {\n                packed *= 256;\n                packed += seed[seed_ptr] as Field;\n                seed_ptr += 1;\n            }\n        }\n        rolling_hash_fields[i] = packed;\n    }\n\n    let compressed =\n        std::hash::poseidon2::Poseidon2::hash(rolling_hash_fields, (SeedBytes / 31) + 1);\n    let mut rolling_hash: [Field; 2] = [compressed, 0];\n\n    let num_hashes = (240 * N) / 254 + (((30 * N) % 32) != 0) as u32;\n    for i in 0..num_hashes - 1 {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        for j in 0..30 {\n            hash_buffer[i * 30 + j] = hash[j];\n        }\n        rolling_hash[1] += 1;\n    }\n\n    {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        let remaining_bytes = 30 * N - (num_hashes - 1) * 30;\n        for j in 0..remaining_bytes {\n            hash_buffer[(num_hashes - 1) * 30 + j] = hash[j];\n        }\n    }\n\n    let num_bits = MOD_BITS * 2;\n    let num_bytes = num_bits / 8 + ((num_bits % 8) != 0) as u32;\n\n    let bits_in_last_byte = num_bits as u8 % 8;\n    let last_byte_mask = (1 as u8 << bits_in_last_byte) - 1;\n    hash_buffer[num_bytes - 1] = hash_buffer[num_bytes - 1] & last_byte_mask;\n\n    let num_bigfield_chunks = (2 * N) / (N - 1) + (((2 * N) % (N - 1)) != 0) as u32;\n    let mut byte_ptr = 0;\n\n    // we want to convert our byte array into bigfield chunks\n    // each chunk has at most N-1 limbs\n    // to determine the exact number of chunks, we need the `!=` or `>` operator which is not avaiable when defining array sizes\n    // so we overestimate at 4\n    // e.g. if N = 20, then we have 40 limbs we want to reduce, but each bigfield chunk is 19 limbs, so we need 3\n    // if N = 2, we have 4 limbs we want to reduce but each bigfield chunk is only 1 limb, so we need 4\n    // max possible number of chunks is therefore 4\n    let mut bigfield_chunks: [[Field; N]; 4] = [[0; N]; 4];\n    for k in 0..num_bigfield_chunks {\n        let mut bigfield_limbs: [Field; N] = [0; N];\n        let mut num_filled_bytes = (k * 30);\n        let mut num_remaining_bytes = num_bytes - num_filled_bytes;\n        let mut num_remaining_limbs =\n            (num_remaining_bytes / 15) + (num_remaining_bytes % 15 > 0) as u32;\n        let mut more_than_N_minus_one_limbs = (num_remaining_limbs > (N - 1)) as u32;\n        let mut num_limbs_in_bigfield = more_than_N_minus_one_limbs * (N - 1)\n            + num_remaining_limbs * (1 - more_than_N_minus_one_limbs);\n\n        for j in 0..num_limbs_in_bigfield {\n            let mut limb: Field = 0;\n            for _ in 0..15 {\n                let need_more_bytes = (byte_ptr < num_bytes);\n                let mut byte = hash_buffer[byte_ptr];\n                limb *= (256 * need_more_bytes as Field + (1 - need_more_bytes as Field));\n                limb += byte as Field * need_more_bytes as Field;\n                byte_ptr += need_more_bytes as u32;\n            }\n            bigfield_limbs[num_limbs_in_bigfield - 1 - j] = limb;\n        }\n        bigfield_chunks[num_bigfield_chunks - 1 - k] = bigfield_limbs;\n    }\n\n    let mut bigfield_rhs_limbs: [Field; N] = [0; N];\n    bigfield_rhs_limbs[N - 1] = 1;\n    validate_in_range::<_, MOD_BITS>(bigfield_rhs_limbs);\n\n    let mut result: [Field; N] = [0; N];\n\n    for i in 0..num_bigfield_chunks {\n        let bigfield_lhs_limbs = bigfield_chunks[i];\n\n        result = mul(params, result, bigfield_rhs_limbs);\n        result = add(params, result, bigfield_lhs_limbs);\n    }\n    result\n}\n\n/**\n* @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n* @description should be cheaper than using an IF statement (TODO: check!)\n**/\npub(crate) fn conditional_select<let N: u32>(\n    lhs: [Field; N],\n    rhs: [Field; N],\n    predicate: bool,\n) -> [Field; N] {\n    let mut result: [Field; N] = lhs;\n    for i in 0..N {\n        result[i] = (lhs[i] - rhs[i]) * predicate as Field + rhs[i];\n    }\n    result\n}\n\n/**\n    * @brief Validate self != other\n    * @details If A == B, then A == B mod N.\n    *          We can efficiently evaluate A == B mod N where N = circuit modulus\n    *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n    *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n    *          (todo: compute how tiny)\n    **/\npub(crate) fn assert_is_not_equal<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) {\n    let mut l: Field = 0;\n    let mut r: Field = 0;\n    let mut modulus_mod_n: Field = 0;\n    let two_pow_120: Field = 0x1000000000000000000000000000000;\n    let modulus = params.modulus;\n    for i in 0..N {\n        l *= two_pow_120;\n        r *= two_pow_120;\n        modulus_mod_n *= two_pow_120;\n        l += lhs[N - i - 1];\n        r += rhs[N - i - 1];\n        modulus_mod_n += modulus[N - i - 1];\n    }\n\n    // lhs can be either X mod N or P + X mod N\n    // rhs can be either Y mod N or P + Y mod N\n    // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n    let mut diff = l - r;\n    let mut target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n    assert(target != 0, \"asssert_is_not_equal fail\");\n}\n\npub(crate) fn eq<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> bool {\n    let diff = sub::<_, MOD_BITS>(params, lhs, rhs);\n    // if self == other, possible values of `diff` will be `p` or `0`\n    // (the subtract operator constrains diff to be < ceil(log(p)))\n    // TODO: can do this more efficiently via witngen in unconstrained functions?\n    let mut is_equal_modulus: bool = true;\n    let mut is_equal_zero: bool = true;\n    for i in 0..N {\n        is_equal_modulus = is_equal_modulus & (diff[i] == params.modulus[i]);\n        is_equal_zero = is_equal_zero & (diff[i] == 0);\n    }\n    is_equal_modulus | is_equal_zero\n}\n\npub(crate) fn validate_in_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) {\n    // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n    let mut p_minus_self: [Field; N] = [0; N];\n    let modulus: [Field; N] = params.modulus;\n    for i in 0..N {\n        p_minus_self[i] = modulus[i] - val[i];\n    }\n    let borrow_flags = unsafe { __validate_in_field_compute_borrow_flags(params, val) };\n    let two_pow_120: Field = 0x1000000000000000000000000000000;\n    p_minus_self[0] += borrow_flags[0] as Field * two_pow_120;\n    for i in 1..N - 1 {\n        p_minus_self[i] += (borrow_flags[i] as Field * two_pow_120 - borrow_flags[i - 1] as Field);\n    }\n    p_minus_self[N - 1] -= borrow_flags[N - 2] as Field;\n    let mut compare = val;\n    compare = p_minus_self;\n    validate_in_range::<_, MOD_BITS>(compare);\n}\n\n/**\n* @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n**/\npub(crate) fn validate_in_range<let N: u32, let MOD_BITS: u32>(limbs: [Field; N]) {\n    for i in 0..(N - 1) {\n        limbs[i].assert_max_bit_size::<120>();\n    }\n    limbs[N - 1].assert_max_bit_size::<MOD_BITS - ((N - 1) * 120)>();\n}\n\n/**\n* @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n* @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n*              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n*              Why is this?\n*              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n*                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n*                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n*              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n*\n*              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n*              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n**/\npub(crate) fn validate_quotient_in_range<let N: u32, let MOD_BITS: u32>(limbs: [Field; N]) {\n    for i in 0..(N) {\n        limbs[i].assert_max_bit_size::<120>();\n    }\n    // Note: replace magic number 6 with definition\n    limbs[N - 1].assert_max_bit_size::<MOD_BITS - ((N - 1) * 120) + 6>();\n}\n\n// validate that lhs - rhs does not underflow i.e. lhs > rhs\npub(crate) fn validate_gt<let N: u32, let MOD_BITS: u32>(lhs: [Field; N], rhs: [Field; N]) {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    // a - b = r\n    // p + a - b - r = 0\n    let (result, carry_flags, borrow_flags) = unsafe { __validate_gt_remainder(lhs, rhs) };\n    validate_in_range::<_, MOD_BITS>(result);\n\n    let borrow_shift = 0x1000000000000000000000000000000;\n    let carry_shift = 0x1000000000000000000000000000000;\n\n    let mut addend: [Field; N] = [0; N];\n    let result_limb = lhs[0] - rhs[0] + addend[0] - result[0] - 1\n        + (borrow_flags[0] as Field * borrow_shift)\n        - (carry_flags[0] as Field * carry_shift);\n    assert(result_limb == 0);\n\n    for i in 1..N - 1 {\n        let result_limb = lhs[i] - rhs[i] + addend[i] - result[i] - borrow_flags[i - 1] as Field\n            + carry_flags[i - 1] as Field\n            + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n        assert(result_limb == 0);\n    }\n\n    let result_limb = lhs[N - 1] - rhs[N - 1] + addend[N - 1]\n        - result[N - 1]\n        - borrow_flags[N - 2] as Field\n        + carry_flags[N - 2] as Field;\n    assert(result_limb == 0);\n}\n\npub(crate) fn neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [Field; N] {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    let (result, borrow_flags) = unsafe { __neg_with_flags(params, val) };\n    validate_in_range::<_, MOD_BITS>(result);\n    let modulus = params.modulus;\n    let borrow_shift = 0x1000000000000000000000000000000;\n    let result_limb = modulus[0] - val[0] - result[0] + (borrow_flags[0] as Field * borrow_shift);\n    assert(result_limb == 0);\n    for i in 1..N - 1 {\n        let result_limb = modulus[i] - val[i] - result[i] - borrow_flags[i - 1] as Field\n            + (borrow_flags[i] as Field * borrow_shift);\n        assert(result_limb == 0);\n    }\n    let result_limb = modulus[N - 1] - val[N - 1] - result[N - 1] - borrow_flags[N - 2] as Field;\n    assert(result_limb == 0);\n    result\n}\n\npub(crate) fn add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    let (result, carry_flags, borrow_flags, overflow_modulus) =\n        unsafe { __add_with_flags(params, lhs, rhs) };\n    validate_in_range::<_, MOD_BITS>(result);\n    let modulus = params.modulus;\n    let borrow_shift = 0x1000000000000000000000000000000;\n    let carry_shift = 0x1000000000000000000000000000000;\n\n    let mut subtrahend: [Field; N] = [0; N];\n    if (overflow_modulus) {\n        subtrahend = modulus;\n    }\n    let result_limb = lhs[0] + rhs[0] - subtrahend[0] - result[0]\n        + (borrow_flags[0] as Field * borrow_shift)\n        - (carry_flags[0] as Field * carry_shift);\n    assert(result_limb == 0);\n    for i in 1..N - 1 {\n        let result_limb = lhs[i] + rhs[i] - subtrahend[i] - result[i] - borrow_flags[i - 1] as Field\n            + carry_flags[i - 1] as Field\n            + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n        assert(result_limb == 0);\n    }\n    let result_limb = lhs[N - 1] + rhs[N - 1]\n        - subtrahend[N - 1]\n        - result[N - 1]\n        - borrow_flags[N - 2] as Field\n        + carry_flags[N - 2] as Field;\n    assert(result_limb == 0);\n    result\n}\n\npub(crate) fn sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    // a - b = r\n    // p + a - b - r = 0\n    let (result, carry_flags, borrow_flags, underflow) =\n        unsafe { __sub_with_flags(params, lhs, rhs) };\n    validate_in_range::<_, MOD_BITS>(result);\n    let modulus = params.modulus;\n    let borrow_shift = 0x1000000000000000000000000000000;\n    let carry_shift = 0x1000000000000000000000000000000;\n\n    let mut addend: [Field; N] = [0; N];\n    if (underflow) {\n        addend = modulus;\n    }\n    let result_limb = lhs[0] - rhs[0] + addend[0] - result[0]\n        + (borrow_flags[0] as Field * borrow_shift)\n        - (carry_flags[0] as Field * carry_shift);\n    assert(result_limb == 0);\n    for i in 1..N - 1 {\n        let result_limb = lhs[i] - rhs[i] + addend[i] - result[i] - borrow_flags[i - 1] as Field\n            + carry_flags[i - 1] as Field\n            + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n        assert(result_limb == 0);\n    }\n    let result_limb = lhs[N - 1] - rhs[N - 1] + addend[N - 1]\n        - result[N - 1]\n        - borrow_flags[N - 2] as Field\n        + carry_flags[N - 2] as Field;\n    assert(result_limb == 0);\n    result\n}\n\n// Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n//       via evaluate_quadratic_expression\n// e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n//      will create much fewer constraints than calling `mul` and `add` directly\npub(crate) fn mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let result = unsafe { __mul::<_, MOD_BITS>(params, lhs, rhs) };\n    evaluate_quadratic_expression(\n        params,\n        [[lhs]],\n        [[false]],\n        [[rhs]],\n        [[false]],\n        [result],\n        [true],\n    );\n    result\n}\n\n// Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\npub(crate) fn div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    assert(\n        params.has_multiplicative_inverse,\n        \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\",\n    );\n    let result = unsafe { __div::<_, MOD_BITS>(params, lhs, rhs) };\n    evaluate_quadratic_expression(\n        params,\n        [[result]],\n        [[false]],\n        [[rhs]],\n        [[false]],\n        [lhs],\n        [true],\n    );\n    result\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor \n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) fn udiv_mod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let (quotient, remainder) = unsafe { __udiv_mod(numerator, divisor) };\n\n    // self / divisor = quotient rounded\n    // quotient * divisor + remainder - self = 0\n    evaluate_quadratic_expression(\n        params,\n        [[quotient]],\n        [[false]],\n        [[divisor]],\n        [[false]],\n        [numerator, remainder],\n        [true, false],\n    );\n    // we need (remainder < divisor)\n    // implies (divisor - remainder > 0)\n    validate_gt::<_, MOD_BITS>(divisor, remainder);\n    (quotient, remainder)\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor \n*\n* i.e. return param is floor(numerator / divisor)\n**/\npub(crate) fn udiv<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).0\n}\n\n/**\n* @brief udiv_mod performs integer modular reduction\n*\n* i.e. 1. numerator % divisor = return value\n**/\npub(crate) fn umod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).1\n}\n\n","path":"/Users/saleel/nargo/github.com/noir-lang/noir-bignumv0.4.1/src/fns/constrained_ops.nr"},"78":{"source":"/**\n* @brief construct a BigNum instance out of an array of bytes in BIG ENDIAN format\n* @description: each 120-bit limb represents 15 bytes, we require that the size of the byte array\n*               is precisely large enough to cover MOD_BITS\n* @param x: input byte array\n**/\npub(crate) fn from_be_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    x: [u8; NBytes],\n) -> [Field; N] {\n    let num_bits = NBytes * 8;\n    assert(num_bits >= MOD_BITS);\n    assert(num_bits - MOD_BITS < 8);\n    let mut result = [0; N];\n\n    let excess_bytes = N * 15 - NBytes;\n    let final_limb_bytes = 15 - excess_bytes;\n    let mut limb: Field = 0;\n    let mut k = 0;\n    for _j in 0..final_limb_bytes {\n        limb *= 256;\n        limb += x[k] as Field;\n        k += 1;\n    }\n    result[N - 1] = limb;\n\n    for i in 1..N {\n        let mut limb: Field = 0;\n        for _j in 0..15 {\n            limb *= 256;\n            limb += x[k] as Field;\n            k += 1;\n        }\n        result[N - i - 1] = limb;\n    }\n\n    let most_significant_byte: Field = x[0] as Field;\n\n    most_significant_byte.assert_max_bit_size::<8 - (NBytes * 8 - MOD_BITS)>();\n    result\n}\n\npub(crate) fn to_le_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    val: [Field; N],\n) -> [u8; NBytes] {\n    let nbytes = (MOD_BITS / 8) + (MOD_BITS % 8 != 0) as u32;\n    assert(nbytes <= NBytes);\n\n    let mut result: [u8; NBytes] = [0; NBytes];\n    for i in 0..N - 1 {\n        let limb_bytes: [u8; 15] = val[i].to_le_bytes();\n        for j in 0..15 {\n            result[i * 15 + j] = limb_bytes[j];\n        }\n    }\n    let last_limb_bytes: [u8; 15] = val[N - 1].to_le_bytes();\n    let num_last_bytes = (NBytes - (N - 1) * 15);\n    for i in 0..num_last_bytes {\n        result[(N - 1) * 15 + i] = last_limb_bytes[i];\n    }\n    result\n}\n","path":"/Users/saleel/nargo/github.com/noir-lang/noir-bignumv0.4.1/src/fns/serialization.nr"},"80":{"source":"use crate::fns::constrained_ops::derive_from_seed;\nuse crate::fns::unconstrained_helpers::{\n    __barrett_reduction, __multiplicative_generator, __primitive_root_log_size,\n    __tonelli_shanks_sqrt_inner_loop_check,\n};\nuse crate::params::BigNumParams as P;\nuse crate::utils::split_bits;\nuse crate::utils::u60_representation::U60Repr;\n\n/**\n * In this file:\n *\n * __one\n * __derive_from_seed\n * __eq\n * __is_zero\n * __neg\n * __add\n * __sub\n * __mul_with_quotient\n * __mul\n * __div\n * __udiv_mod\n * __invmod\n * __pow\n * __batch_invert\n * __batch_invert_slice\n */\n\npub(crate) unconstrained fn __one<let N: u32>() -> [Field; N] {\n    let mut limbs: [Field; N] = [0; N];\n    limbs[0] = 1;\n    limbs\n}\n\n/// Deterministically derives a big_num from a seed value.\n///\n/// Takes a seed byte array and generates a big_num in the range [0, modulus-1].\n///\n/// ## Value Parameters\n///\n/// - `params`: The BigNum parameters containing modulus and reduction info\n/// - `seed`:  Input seed bytes to derive from.\n///\n/// ## Returns\n///\n///  An array of field elements derived from the seed (the limbs of the big_num)\npub(crate) unconstrained fn __derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [Field; N] {\n    let out = derive_from_seed::<N, MOD_BITS, SeedBytes>(params, seed);\n    out\n}\n\npub(crate) unconstrained fn __eq<let N: u32>(lhs: [Field; N], rhs: [Field; N]) -> bool {\n    lhs == rhs\n}\n\npub(crate) unconstrained fn __is_zero<let N: u32>(limbs: [Field; N]) -> bool {\n    let mut result: bool = true;\n    for i in 0..N {\n        result = result & (limbs[i] == 0);\n    }\n\n    result\n}\n\n/**\n* @brief given an input `x`, compute `2p - x` (unconstrained)\n*\n* @description we subtract the input from double the modulus, because all constrained BigNum operations\n*              only guarantee that the output is in the range [0, ceil(log2(p))].\n*              I.E. the input may be larger than the modulus `p`.\n*              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n*              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n*              because such a check is expensive and usually unneccesary.\n*/\npub(crate) unconstrained fn __neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    limbs: [Field; N],\n) -> [Field; N] {\n    let f: [Field; N] = limbs;\n    let x_u60: U60Repr<N, 2> = U60Repr::from(f);\n    U60Repr::into(params.modulus_u60 - x_u60)\n}\n\npub(crate) unconstrained fn __add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let x_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let y_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let mut z_u60 = x_u60 + y_u60;\n\n    if z_u60.gte(params.modulus_u60) {\n        z_u60 = z_u60 - params.modulus_u60;\n    }\n    U60Repr::into(z_u60)\n}\n\n/**\n* @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n* @description see `__neg` for why we use 2p instead of p\n**/\npub(crate) unconstrained fn __sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    __add(params, lhs, __neg(params, rhs))\n}\n\npub(crate) unconstrained fn __mul_with_quotient<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let mut mul: [Field; 2 * N] = [0; 2 * N];\n    for i in 0..N {\n        for j in 0..N {\n            mul[i + j] += lhs[i] * rhs[j];\n        }\n    }\n    let to_reduce = split_bits::__normalize_limbs(mul, 2 * N);\n    let (q, r) = __barrett_reduction(\n        to_reduce,\n        params.redc_param,\n        MOD_BITS,\n        params.modulus,\n        params.modulus_u60_x4,\n    );\n\n    (q, r)\n}\n\npub(crate) unconstrained fn __mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let (_, b) = __mul_with_quotient::<_, MOD_BITS>(params, lhs, rhs);\n    b\n}\n\npub(crate) unconstrained fn __div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    let inv_divisor = __invmod::<_, MOD_BITS>(params, divisor);\n    __mul::<_, MOD_BITS>(params, numerator, inv_divisor)\n}\n\n/**\n* @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) unconstrained fn __udiv_mod<let N: u32>(\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let mut quotient_u60: U60Repr<N, 2> = U60Repr::from([0; N]);\n    let mut remainder_u60: U60Repr<N, 2> = U60Repr::from(numerator);\n\n    let mut divisor_u60: U60Repr<N, 2> = U60Repr::from(divisor);\n    let b = divisor_u60;\n\n    let mut bit_difference = remainder_u60.get_msb() - divisor_u60.get_msb();\n\n    let mut accumulator_u60: U60Repr<N, 2> = U60Repr::one();\n    divisor_u60 = divisor_u60.shl(bit_difference);\n    accumulator_u60 = accumulator_u60.shl(bit_difference);\n\n    if (divisor_u60.gte(remainder_u60 + U60Repr::one())) {\n        divisor_u60.shr1();\n        accumulator_u60.shr1();\n    }\n    for _ in 0..(N * 120) {\n        if (remainder_u60.gte(b) == false) {\n            break;\n        }\n\n        // we've shunted 'divisor' up to have the same bit length as our remainder.\n        // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n        if (remainder_u60.gte(divisor_u60)) {\n            remainder_u60 -= divisor_u60;\n            // we can use OR here instead of +, as\n            // accumulator is always a nice power of two\n            quotient_u60 = quotient_u60 + accumulator_u60;\n        }\n        divisor_u60.shr1(); // >>= 1;\n        accumulator_u60.shr1(); //  >>= 1;\n    }\n\n    (U60Repr::into(quotient_u60), U60Repr::into(remainder_u60))\n}\n\npub(crate) unconstrained fn __invmod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [Field; N] {\n    let one: [Field; N] = __one::<N>();\n    let one_u60: U60Repr<N, 2> = U60Repr::from(one);\n    let exp_u60 = params.modulus_u60.sub(one_u60.add(one_u60));\n    let exp = U60Repr::into(exp_u60);\n    __pow::<_, MOD_BITS>(params, val, exp)\n}\n\npub(crate) unconstrained fn __pow<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n    exponent: [Field; N],\n) -> [Field; N] {\n    let x: U60Repr<N, 2> = U60Repr::from(exponent);\n\n    let num_bits = MOD_BITS + 1;\n\n    let mut accumulator: [Field; N] = __one::<N>();\n\n    for i in 0..num_bits {\n        accumulator = __mul::<_, MOD_BITS>(params, accumulator, accumulator);\n        if x.get_bit(num_bits - i - 1) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, val);\n        }\n    }\n    accumulator\n}\n\npub(crate) unconstrained fn __batch_invert<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]; M],\n) -> [[Field; N]; M] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [Field; N] = __one::<N>();\n    let mut result: [[Field; N]; M] = [[0; N]; M];\n    let mut temporaries: [[Field; N]] = &[];\n    for i in 0..x.len() {\n        temporaries = temporaries.push_back(accumulator);\n        if (__is_zero(x[i]) == false) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    let mut T0: [Field; N] = [0; N];\n    for i in 0..x.len() {\n        let idx = x.len() - 1 - i;\n        if (__is_zero(x[idx]) == false) {\n            T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\npub(crate) unconstrained fn __batch_invert_slice<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]],\n) -> [[Field; N]] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [Field; N] = __one::<N>();\n    let mut result: [[Field; N]] = [[0; N]];\n    let mut temporaries: [[Field; N]] = &[];\n    for i in 0..x.len() {\n        temporaries = temporaries.push_back(accumulator);\n        if (__is_zero(x[i]) == false) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n        result = result.push_back([0; N]);\n    }\n\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    let mut T0: [Field; N] = [0; N];\n    for i in 0..x.len() {\n        let idx = x.len() - 1 - i;\n        if (__is_zero(x[idx]) == false) {\n            T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\n/**\n* @brief compute a modular square root using the Tonelli-Shanks algorithm\n* @details only use for prime fields! Function may infinite loop if used for non-prime fields\n* @note this is unconstrained fn. To constrain a square root, validate that output^2 = self\n* TODO: create fn that constrains nonexistence of square root (i.e. find x where x^2 = -self)\n**/\npub(crate) unconstrained fn __tonelli_shanks_sqrt<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    input: [Field; N],\n) -> std::option::Option<[Field; N]> {\n    // Tonelli-shanks algorithm begins by finding a field element Q and integer S,\n    // such that (p - 1) = Q.2^{s}\n    // We can compute the square root of a, by considering a^{(Q + 1) / 2} = R\n    // Once we have found such an R, we have\n    // R^{2} = a^{Q + 1} = a^{Q}a\n    // If a^{Q} = 1, we have found our square root.\n    // Otherwise, we have a^{Q} = t, where t is a 2^{s-1}'th root of unity.\n    // This is because t^{2^{s-1}} = a^{Q.2^{s-1}}.\n    // We know that (p - 1) = Q.w^{s}, therefore t^{2^{s-1}} = a^{(p - 1) / 2}\n    // From Euler's criterion, if a is a quadratic residue, a^{(p - 1) / 2} = 1\n    // i.e. t^{2^{s-1}} = 1\n    // To proceed with computing our square root, we want to transform t into a smaller subgroup,\n    // specifically, the (s-2)'th roots of unity.\n    // We do this by finding some value b,such that\n    // (t.b^2)^{2^{s-2}} = 1 and R' = R.b\n    // Finding such a b is trivial, because from Euler's criterion, we know that,\n    // for any quadratic non-residue z, z^{(p - 1) / 2} = -1\n    // i.e. z^{Q.2^{s-1}} = -1\n    // => z^Q is a 2^{s-1}'th root of -1\n    // => z^{Q^2} is a 2^{s-2}'th root of -1\n    // Since t^{2^{s-1}} = 1, we know that t^{2^{s - 2}} = -1\n    // => t.z^{Q^2} is a 2^{s - 2}'th root of unity.\n    // We can iteratively transform t into ever smaller subgroups, until t = 1.\n    // At each iteration, we need to find a new value for b, which we can obtain\n    // by repeatedly squaring z^{Q}\n    let one_u60: U60Repr<N, 2> = unsafe { U60Repr::one() };\n    let primitive_root_log_size = __primitive_root_log_size::<_, MOD_BITS>(params);\n    let mut Q = (params.modulus_u60 - one_u60).shr(primitive_root_log_size - 1);\n    let Q_minus_one_over_two_u60 = (Q - one_u60).shr(2);\n    let Q_minus_one_over_two: [Field; N] = U60Repr::into(Q_minus_one_over_two_u60);\n    let mut z = __multiplicative_generator::<_, MOD_BITS>(params); // the generator is a non-residue\n    let mut b = __pow::<_, MOD_BITS>(params, input, Q_minus_one_over_two);\n    let mut r = __mul::<_, MOD_BITS>(params, input, b);\n    let mut t = __mul::<_, MOD_BITS>(params, r, b);\n    let mut check: [Field; N] = t;\n    for _ in 0..primitive_root_log_size - 1 {\n        check = __mul::<_, MOD_BITS>(params, check, check);\n    }\n    let mut found_root = false;\n    let one: [Field; N] = __one::<N>();\n    if (__eq(check, one) == false) {} else {\n        let mut t1 = __pow::<_, MOD_BITS>(params, z, Q_minus_one_over_two);\n        let mut t2 = __mul::<_, MOD_BITS>(params, t1, z);\n        let mut c = __mul::<_, MOD_BITS>(params, t2, t1);\n        let mut m: u32 = primitive_root_log_size;\n        // tonelli shanks inner 1\n        // (if t2m == 1) then skip\n        // else increase i and square t2m and go again\n        // algorithm runtime should only be max the number of bits in modulus\n        for _ in 0..MOD_BITS {\n            if (__eq(t, one)) {\n                found_root = true;\n                break;\n            }\n            let mut t2m = t;\n            // while loop time\n            let i = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, 0);\n            let mut j = m - i - 1;\n            b = c;\n            for _ in 0..j {\n                // how big\n                if (j == 0) {\n                    break;\n                }\n                b = __mul(params, b, b);\n                //j -= 1;\n            }\n            c = __mul::<_, MOD_BITS>(params, b, b);\n            t = __mul::<_, MOD_BITS>(params, t, c);\n            r = __mul::<_, MOD_BITS>(params, r, b);\n            m = i;\n        }\n    }\n    let result = if found_root {\n        std::option::Option::some(r)\n    } else {\n        std::option::Option::none()\n    };\n    result\n}\n","path":"/Users/saleel/nargo/github.com/noir-lang/noir-bignumv0.4.1/src/fns/unconstrained_ops.nr"},"81":{"source":"use crate::utils::split_bits;\nuse crate::utils::u60_representation::U60Repr;\n\nuse crate::fns::unconstrained_ops::{__add, __eq, __mul, __neg, __one, __pow};\nuse crate::params::BigNumParams as P;\n\nglobal TWO_POW_60: u64 = 0x1000000000000000;\n\n/**\n * In this file:\n *\n * __validate_in_field_compute_borrow_flags\n * __validate_gt_remainder\n * __neg_with_flags\n * __add_with_flags\n * __sub_with_flags\n * __barrett_reduction\n * __tonelli_shanks_sqrt\n */\n\npub(crate) unconstrained fn __validate_in_field_compute_borrow_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [bool; N] {\n    let mut flags: [bool; N] = [false; N];\n    let modulus: [Field; N] = params.modulus;\n    flags[0] = modulus[0].lt(val[0]);\n    for i in 1..N - 1 {\n        flags[i] = modulus[i].lt(val[i] + flags[i - 1] as Field);\n    }\n    flags\n}\n\npub(crate) unconstrained fn __validate_gt_remainder<let N: u32>(\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N]) {\n    let a_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let mut b_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let underflow = b_u60.gte(a_u60);\n    b_u60 += U60Repr::one();\n    assert(underflow == false, \"BigNum::validate_gt check fails\");\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = b_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            if (carry & borrow == 1) {\n                carry = 0;\n                borrow = 0;\n            }\n            carry_flags[i / 2] = carry as bool;\n            borrow_flags[i / 2] = borrow as bool;\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, carry_flags, borrow_flags)\n}\n\npub(crate) unconstrained fn __neg_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> ([Field; N], [bool; N]) {\n    let x_u60: U60Repr<N, 2> = U60Repr::from(val);\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut borrow_in: u64 = 0;\n\n    let mut borrow_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let sub_term = x_u60.limbs[i] + borrow_in;\n        let borrow = (sub_term > params.modulus_u60.limbs[i]) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + params.modulus_u60.limbs[i] - sub_term;\n\n        borrow_in = borrow;\n        if ((i & 1) == 1) {\n            borrow_flags[i / 2] = borrow as bool;\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, borrow_flags)\n}\n\npub(crate) unconstrained fn __add_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N], bool) {\n    let a_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let b_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n    let add_u60 = a_u60 + b_u60;\n\n    let overflow = add_u60.gte(params.modulus_u60);\n\n    let mut subtrahend_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    if overflow {\n        subtrahend_u60 = params.modulus_u60;\n    }\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + b_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = subtrahend_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            let idx = (i - 1) / 2;\n            if (carry & borrow == 1) {\n                carry = 0;\n                borrow = 0;\n            }\n            carry_flags[idx] = carry as bool;\n            borrow_flags[idx] = borrow as bool;\n        }\n    }\n    let result = U60Repr::into(result_u60);\n\n    (result, carry_flags, borrow_flags, overflow)\n}\n\npub(crate) unconstrained fn __sub_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N], bool) {\n    let a_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let b_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let underflow = b_u60.gte(a_u60 + U60Repr::one());\n\n    let addend_u60: U60Repr<N, 2> = if underflow {\n        params.modulus_u60\n    } else {\n        U60Repr { limbs: [0; 2 * N] }\n    };\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + addend_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = b_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            if (carry & borrow == 1) {\n                carry = 0;\n                borrow = 0;\n            }\n            carry_flags[i / 2] = carry as bool;\n            borrow_flags[i / 2] = borrow as bool;\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, carry_flags, borrow_flags, underflow)\n}\n\n/**\n * @brief BARRETT_REDUCTION_OVERFLOW_BITS defines how large an input to barrett reduction can be\n * @details maximum value = modulus^2 <<BARRETT_REDUCTION_OVERFLOW_BITS\n *          see __barrett_reduction for more details\n **/\ncomptime global BARRETT_REDUCTION_OVERFLOW_BITS: u32 = 4;\n\npub(crate) unconstrained fn __barrett_reduction<let N: u32>(\n    x: [Field; 2 * N],\n    redc_param: [Field; N],\n    k: u32,\n    modulus: [Field; N],\n    modulus_u60: U60Repr<N, 4>,\n) -> ([Field; N], [Field; N]) {\n    // for each i in 0..(N + N), adds x[i] * redc_param[j] to mulout[i + j] for each j in 0..N\n    let mut mulout: [Field; 3 * N] = [0; 3 * N];\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout[i + j] += x[i] * redc_param[j];\n        }\n    }\n\n    mulout = split_bits::__normalize_limbs(mulout, 3 * N - 1);\n    let mulout_u60: U60Repr<N, 6> = U60Repr::new(mulout);\n\n    // When we apply the barrett reduction, the maximum value of the output will be\n    // <= p * (1 + x/2^{2k})\n    // where p = modulus,\n    //       x = reduction input\n    // if x > p * p, we need k to be larger than modulus_bits()\n    // we hardcode k = 4, which means that the maximum value of x is approx. 16 * p * p\n    // this should be larger than most values put into `evaluate_quadratic_expression`\n    // TODO: try and detect cases where x might be too large at comptime\n    // N.B. BARRETT_REDUCTION_OVERFLOW_BITS affects how `redc_param` is generated.\n    // `redc_param` = 2^{modulus_bits() * 2 + BARRETT_REDUCTION_OVERFLOW_BITS} / modulus\n    // NOTE: very niche edge case error that we need to be aware of:\n    //       N must be large enough to cover the modulus *plus* BARRETT_REDUCTION_OVERFLOW_BITS\n    //       i.e. a 359-bit prime needs (I think) 4 limbs to represent or we may overflow when calling __barrett_reduction\n    let mut quotient_u60 = mulout_u60.shr((k + k + BARRETT_REDUCTION_OVERFLOW_BITS));\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient_full: [Field; 3 * N] = quotient_u60.into_field_array();\n    let mut partial_quotient: [Field; 2 * N] = [0; 2 * N];\n    for i in 0..2 * N {\n        partial_quotient[i] = partial_quotient_full[i];\n    }\n    // quotient_mul_modulus can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus: [Field; 2 * N] = [0; 2 * N];\n    let mut quotient_mul_modulus_normalized: [Field; 2 * N] = [0; 2 * N];\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus[i + j] += partial_quotient[i] * modulus[j];\n        }\n    }\n\n    for i in 0..(N + N) {\n        let (lo, hi) = split_bits::split_120_bits(quotient_mul_modulus[i]);\n        quotient_mul_modulus_normalized[i] = lo;\n        // TODO: what is faster, leaving this if statement in or out?\n        // (array is size-1 too large so we can tolerate adding 0 into max element)\n        if (i + 1 < N + N) {\n            quotient_mul_modulus[i + 1] += hi;\n        }\n    }\n    let quotient_mul_modulus_u60: U60Repr<N, 4> = U60Repr::new(quotient_mul_modulus_normalized);\n\n    // convert the input into U60Repr\n    let x_u60: U60Repr<N, 4> = U60Repr::new(x);\n    let mut remainder_u60 = x_u60 - quotient_mul_modulus_u60;\n    // barrett reduction is quircky so might need to remove a few modulus_u60 from the remainder\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    } else {}\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n\n    let q: [Field; N] = U60Repr::into(quotient_u60);\n    let r: [Field; N] = U60Repr::into(remainder_u60);\n\n    (q, r)\n}\n\n/**\n* @brief compute the log of the size of the primitive root\n* @details find the maximum value k where x^k = 1, where x = primitive root\n*          This is needed for our Tonelli-Shanks sqrt algorithm\n**/\npub(crate) unconstrained fn __primitive_root_log_size<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> u32 {\n    let mut target: U60Repr<N, 2> = params.modulus_u60 - U60Repr::one();\n    let mut result: u32 = 0;\n    for _ in 0..MOD_BITS {\n        let lsb_is_one = (target.limbs[0] & 1) == 1;\n        if (!lsb_is_one) {\n            result += 1;\n            target.shr1();\n        } else {\n            break;\n        }\n    }\n    result\n}\n\n/**\n* @brief inner loop fn for `find_multiplive_generator`\n* @details recursive function to get around the lack of a `while` keyword\n**/\nunconstrained fn __recursively_find_multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    target: [Field; N],\n    p_minus_one_over_two: [Field; N],\n) -> (bool, [Field; N]) {\n    let exped = __pow(params, target, p_minus_one_over_two);\n    let one: [Field; N] = __one();\n    let neg_one = __neg(params, one);\n    let found = __eq(exped, neg_one);\n    let mut result: (bool, [Field; N]) = (found, target);\n    if (!found) {\n        let _target = unsafe { __add(params, target, one) };\n        result = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n            params,\n            _target,\n            p_minus_one_over_two,\n        );\n    }\n    result\n}\n\n/**\n* @brief find multiplicative generator `g` where `g` is the smallest value that is not a quadratic residue\n*        i.e. smallest g where g^2 = -1\n* @note WARNING if multiplicative generator does not exist, this function will enter an infinite loop!\n**/\npub(crate) unconstrained fn __multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> [Field; N] {\n    let mut target: [Field; N] = __one();\n    let p_minus_one_over_two: U60Repr<N, 2> = (params.modulus_u60 - U60Repr::one()).shr(1);\n    let p_minus_one_over_two: [Field; N] = U60Repr::into(p_minus_one_over_two);\n    let (_, target) = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n        params,\n        target,\n        p_minus_one_over_two,\n    );\n    target\n}\n\npub(crate) unconstrained fn __tonelli_shanks_sqrt_inner_loop_check<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    t2m: [Field; N],\n    i: u32,\n) -> u32 {\n    let one: [Field; N] = __one();\n    let is_one = __eq(t2m, one);\n    let mut result = i;\n    if (!is_one) {\n        let t2m = __mul::<_, MOD_BITS>(params, t2m, t2m);\n        let i = i + 1;\n        result = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, i);\n    }\n    result\n}\n","path":"/Users/saleel/nargo/github.com/noir-lang/noir-bignumv0.4.1/src/fns/unconstrained_helpers.nr"},"85":{"source":"global TWO_POW_56: u64 = 0x100000000000000;\nglobal TWO_POW_60: u64 = 0x1000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 120 bit fields\npub unconstrained fn split_120_bits(mut x: Field) -> (Field, Field) {\n    // Here we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_56 = ((x as u64) % TWO_POW_56) as Field;\n\n    let low = low_lower_64 + TWO_POW_64 * low_upper_56;\n    let high = (x - low_upper_56) / TWO_POW_56 as Field;\n\n    (low, high)\n}\n\n/**\n * @brief Decomposes a single field into two 60 bit fields\n *\n * @description Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\n **/\npub unconstrained fn split_60_bits(x: Field) -> (u64, u64) {\n    // Here we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let x_lower_64 = (x as u64);\n    let low = x_lower_64 % TWO_POW_60;\n    let high = ((x - (low as Field)) / TWO_POW_60 as Field) as u64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn __normalize_limbs<let N: u32>(\n    input: [Field; N],\n    range: u32,\n) -> [Field; N] {\n    let mut normalized: [Field; N] = [0; N];\n    let mut inp: _ = input;\n    for i in 0..(range - 1) {\n        let (lo, hi) = split_120_bits(inp[i]);\n\n        normalized[i] = lo;\n        inp[i + 1] += hi;\n    }\n    {\n        let (lo, hi) = split_120_bits(inp[range - 1]);\n        normalized[range - 1] = lo;\n        assert(hi == 0);\n    }\n    normalized\n}\n","path":"/Users/saleel/nargo/github.com/noir-lang/noir-bignumv0.4.1/src/utils/split_bits.nr"},"86":{"source":"use crate::utils::msb::get_msb64;\nuse crate::utils::split_bits;\n\n/**\n * @brief U60Repr represents a BigNum element as a sequence of 60-bit unsigned integers.\n *\n * @description: used in unconstrained functions when computing witness values.\n * It is helpful to use u60 types when evaluating addition operations that can overflow the field modulus,\n * as well as when performing bit shifts.\n */\npub struct U60Repr<let N: u32, let NumSegments: u32> {\n    pub(crate) limbs: [u64; N * NumSegments],\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Add for U60Repr<N, NumSegments> {\n    fn add(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut carry: u64 = 0;\n        for i in 0..N * NumSegments {\n            let mut add: u64 = self.limbs[i] + b.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            result.limbs[i] = add;\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Sub for U60Repr<N, NumSegments> {\n    fn sub(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        for i in 0..N * NumSegments {\n            borrow = ((b.limbs[i] + borrow_in) > self.limbs[i]) as u64;\n            let sub = (borrow << 60) + self.limbs[i] - b.limbs[i] - borrow_in;\n            result.limbs[i] = sub;\n            borrow_in = borrow;\n        }\n\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::From<[Field; N]> for U60Repr<N, NumSegments> {\n    fn from(input: [Field; N]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..(N) {\n            let (lo, hi) = unsafe { split_bits::split_60_bits(input[i]) };\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::Into<[Field; N]> for U60Repr<N, NumSegments> {\n    fn into(x: U60Repr<N, NumSegments>) -> [Field; N] {\n        let mut result: [Field; N] = [0; N];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..N {\n            result[i] = x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * two_pow_60);\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::cmp::Eq for U60Repr<N, NumSegments> {\n    fn eq(self, other: Self) -> bool {\n        self.limbs == other.limbs\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> U60Repr<N, NumSegments> {\n\n    pub(crate) unconstrained fn new<let NumFieldSegments: u32>(\n        x: [Field; N * NumFieldSegments],\n    ) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..(N * NumFieldSegments) {\n            let (lo, hi) = split_bits::split_60_bits(x[i]);\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n\n    pub(crate) unconstrained fn one() -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        result.limbs[0] = 1;\n        result\n    }\n\n    pub(crate) unconstrained fn into_field_array(\n        x: U60Repr<N, NumSegments>,\n    ) -> [Field; N * NumSegments / 2] {\n        let mut result: [Field; N * NumSegments / 2] = [0; N * NumSegments / 2];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..(N * NumSegments / 2) {\n            result[i] = x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * two_pow_60);\n        }\n        result\n    }\n\n    pub(crate) unconstrained fn gte(self, b: Self) -> bool {\n        let mut result = false;\n        let mut early_exit = false;\n        for i in 0..(N * NumSegments) {\n            if (b.limbs[(N * NumSegments) - 1 - i] < self.limbs[((N * NumSegments) - 1 - i)]) {\n                result = true;\n                early_exit = true;\n                break;\n            } else if (\n                b.limbs[(N * NumSegments) - 1 - i] != self.limbs[((N * NumSegments) - 1 - i)]\n            ) {\n                result = false;\n                early_exit = true;\n                break;\n            }\n        }\n        if (early_exit == false) {\n            result = (self.limbs[0] == b.limbs[0]);\n        }\n        result\n    }\n\n    pub(crate) fn get_bit(self, bit: u32) -> bool {\n        let segment_index = bit / 60;\n        let uint_index = bit % 60;\n\n        let limb: u64 = self.limbs[segment_index];\n        let value = (limb >> uint_index as u8) & 1;\n        value == 1\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shr(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = shift % 60;\n        let remainder_shift = 60 - limb_shift;\n        let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        result.limbs[0] = (self.limbs[0 + num_shifted_limbs] >> limb_shift as u8);\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i + num_shifted_limbs];\n            result.limbs[i] = (value >> limb_shift as u8);\n            let remainder: u64 = (value << remainder_shift as u8) & mask;\n            result.limbs[i - 1] = result.limbs[i - 1] + remainder;\n        }\n        result\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shr1(&mut self) {\n        let value = self.limbs[NumSegments * N - 1];\n        self.limbs[NumSegments * N - 1] = value >> 1;\n\n        let mut remainder = (value & 1) << 59;\n\n        for i in 0..N * NumSegments {\n            let value = self.limbs[N * NumSegments - 1 - i];\n            self.limbs[N * NumSegments - 1 - i] = (value >> 1) + remainder;\n            remainder = (value << 59) & 0x800000000000000;\n        }\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shl(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; NumSegments * N] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift: u8 = 60 - limb_shift as u8;\n\n        // 83\n        // limb shift = 1\n        // inside shift = 19 bits to the left\n        // meaning we have 19 carry bits and 41 remainder bits\n        let mask: u64 = (1 as u64 << 60) - 1;\n        //   let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        let value = self.limbs[0];\n\n        let mut remainder = (value >> remainder_shift);\n        result.limbs[num_shifted_limbs] = (value << (limb_shift as u8)) & mask;\n\n        // shift 84. num shifted = 1\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i];\n            let upshift = ((value << (limb_shift as u8)) + remainder) & mask;\n            result.limbs[i + num_shifted_limbs] = upshift;\n            remainder = (value >> remainder_shift);\n            // let remainder: u64 = (self.limbs.get(i + num_shifted_limbs as u64) << remainder_shift as u8) & mask;\n            // result.limbs.set(i - 1, result.limbs.get(i - 1) + remainder);\n        }\n        result\n    }\n\n    pub(crate) fn increment(&mut self) {\n        let mut carry: u64 = 0;\n\n        let mut add: u64 = self.limbs[0] + 1;\n        carry = add >> 60;\n        add = add - (carry << 60);\n        self.limbs[0] = add;\n\n        for i in 1..NumSegments * N {\n            let mut add: u64 = self.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            self.limbs[i] = add;\n        }\n    }\n\n    pub(crate) unconstrained fn get_msb(val: Self) -> u32 {\n        let mut count = 0;\n        for i in 0..N * NumSegments {\n            let v = val.limbs[((N * NumSegments) - 1 - i)];\n            if (v > 0) {\n                count = 60 * ((N * NumSegments) - 1 - i) + get_msb64(v);\n                break;\n            }\n        }\n        count\n    }\n}\n","path":"/Users/saleel/nargo/github.com/noir-lang/noir-bignumv0.4.1/src/utils/u60_representation.nr"},"121":{"source":"use crate::params::BigNumParams;\nuse crate::utils::map::map;\n\nuse crate::fns::{\n    constrained_ops::{\n        add, assert_is_not_equal, conditional_select, derive_from_seed, div, eq, mul, neg, sub,\n        udiv, udiv_mod, umod, validate_in_field, validate_in_range,\n    }, expressions::{__compute_quadratic_expression, evaluate_quadratic_expression},\n    serialization::{from_be_bytes, to_le_bytes},\n    unconstrained_ops::{\n        __add, __batch_invert, __batch_invert_slice, __derive_from_seed, __div, __eq, __invmod,\n        __is_zero, __mul, __neg, __pow, __sub, __tonelli_shanks_sqrt, __udiv_mod,\n    },\n};\n\npub struct RuntimeBigNum<let N: u32, let MOD_BITS: u32> {\n    pub limbs: [Field; N],\n    pub params: BigNumParams<N, MOD_BITS>,\n}\n\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNum<N, MOD_BITS> {}\n\n// All functions prefixed `__` are unconstrained!\n// They're not actually decorated as `unconstrained` because to return the `params` (as part of Self) from an `unconstrained` fn would cause range constraints. Instead, each `__` fn wraps a call to an unconstrained fn, so that the already-range-constrained `params` can be inserted into Self after the unconstrained call.\npub(crate) trait RuntimeBigNumTrait<let N: u32, let MOD_BITS: u32> {\n    pub fn new(params: BigNumParams<N, MOD_BITS>) -> Self;\n    pub fn one(params: BigNumParams<N, MOD_BITS>) -> Self;\n    pub fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self;\n    pub fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self;\n    pub fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [Field]) -> Self;\n    pub fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [Field; N]) -> Self;\n    pub fn from_be_bytes<let NBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        x: [u8; NBytes],\n    ) -> Self;\n\n    pub fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes];\n\n    pub fn modulus(self) -> Self;\n    pub fn modulus_bits() -> u32;\n    pub fn num_limbs() -> u32;\n    // pub fn get(self) -> [Field];\n    pub fn get_limbs(self) -> [Field; N];\n    pub fn get_limb(self, idx: u32) -> Field;\n    pub fn set_limb(&mut self, idx: u32, value: Field);\n\n    unconstrained fn __eq(self, other: Self) -> bool;\n    unconstrained fn __is_zero(self) -> bool;\n\n    // unconstrained\n    pub fn __neg(self) -> Self;\n    // unconstrained\n    pub fn __add(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __sub(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __mul(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __div(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __udiv_mod(self, divisor: Self) -> (Self, Self);\n    // unconstrained\n    pub fn __invmod(self) -> Self;\n    // unconstrained\n    pub fn __pow(self, exponent: Self) -> Self;\n\n    // unconstrained\n    pub fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M];\n    unconstrained fn __batch_invert_slice<let M: u32>(to_invert: [Self]) -> [Self];\n\n    pub fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self>;\n\n    // unconstrained\n    pub fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self);\n\n    pub fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    );\n\n    pub fn eq(lhs: Self, rhs: Self) -> bool {\n        lhs == rhs\n    }\n    pub fn assert_is_not_equal(self, other: Self);\n    pub fn validate_in_field(self);\n    pub fn validate_in_range(self);\n    // pub fn validate_gt(self, lhs: Self, rhs: Self);\n\n    pub fn neg(self) -> Self;\n    pub fn add(lhs: Self, rhs: Self) -> Self {\n        lhs + rhs\n    }\n    pub fn sub(lhs: Self, rhs: Self) -> Self {\n        lhs - rhs\n    }\n    pub fn mul(lhs: Self, rhs: Self) -> Self {\n        lhs * rhs\n    }\n    pub fn div(lhs: Self, rhs: Self) -> Self {\n        lhs / rhs\n    }\n    pub fn udiv_mod(numerator: Self, divisor: Self) -> (Self, Self);\n    pub fn udiv(numerator: Self, divisor: Self) -> Self;\n    pub fn umod(numerator: Self, divisor: Self) -> Self;\n\n    pub fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNumTrait<N, MOD_BITS> for RuntimeBigNum<N, MOD_BITS> {\n\n    fn new(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let limbs: [Field; N] = [0; N];\n        Self { limbs, params }\n    }\n\n    fn one(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let mut result = RuntimeBigNum::new(params);\n        result.limbs[0] = 1;\n        result\n    }\n\n    fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = unsafe { derive_from_seed::<_, MOD_BITS, _>(params, seed) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = unsafe { __derive_from_seed::<_, MOD_BITS, _>(params, seed) };\n        Self { limbs, params }\n    }\n\n    fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [Field]) -> Self {\n        Self { limbs: limbs.as_array(), params }\n    }\n\n    fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [Field; N]) -> Self {\n        Self { limbs, params }\n    }\n\n    fn from_be_bytes<let NBytes: u32>(params: BigNumParams<N, MOD_BITS>, x: [u8; NBytes]) -> Self {\n        Self { limbs: from_be_bytes::<_, MOD_BITS, _>(x), params }\n    }\n\n    fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes] {\n        to_le_bytes::<_, MOD_BITS, _>(self.limbs)\n    }\n\n    fn modulus(self) -> Self {\n        let params = self.params;\n        Self { limbs: params.modulus, params }\n    }\n\n    fn modulus_bits() -> u32 {\n        MOD_BITS\n    }\n\n    fn num_limbs() -> u32 {\n        N\n    }\n\n    // fn get(self) -> [Field] {\n    //     self.get_limbs()\n    // }\n\n    fn get_limbs(self) -> [Field; N] {\n        self.limbs\n    }\n\n    fn get_limb(self, idx: u32) -> Field {\n        self.limbs[idx]\n    }\n\n    fn set_limb(&mut self, idx: u32, value: Field) {\n        self.limbs[idx] = value;\n    }\n\n    unconstrained fn __eq(self, other: Self) -> bool {\n        assert(self.params == other.params);\n        __eq(self.limbs, other.limbs)\n    }\n\n    unconstrained fn __is_zero(self) -> bool {\n        __is_zero(self.limbs)\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __neg(self) -> Self {\n        let params = self.params;\n        let limbs = unsafe { __neg(params, self.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __add(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __sub(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __mul::<_, MOD_BITS>(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        let limbs = unsafe { __div::<_, MOD_BITS>(params, self.limbs, divisor.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = unsafe { __udiv_mod(self.limbs, divisor.limbs) };\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __invmod(self) -> Self {\n        let params = self.params;\n        assert(params.has_multiplicative_inverse);\n        let limbs = unsafe { __invmod::<_, MOD_BITS>(params, self.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __pow(self, exponent: Self) -> Self {\n        let params = self.params;\n        assert(params == exponent.params);\n        let limbs = unsafe { __pow::<_, MOD_BITS>(params, self.limbs, exponent.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs =\n            unsafe { __batch_invert::<_, MOD_BITS, _>(params, x.map(|bn| Self::get_limbs(bn))) };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // Note: can't return a slice from this unconstrained to a constrained function.\n    unconstrained fn __batch_invert_slice<let M: u32>(x: [Self]) -> [Self] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs = unsafe {\n            let inv_slice =\n                __batch_invert_slice::<_, MOD_BITS>(params, x.map(|bn| Self::get_limbs(bn)));\n            inv_slice.as_array()\n        };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self> {\n        let params = self.params;\n        let maybe_limbs = unsafe { __tonelli_shanks_sqrt(params, self.limbs) };\n        maybe_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self) {\n        let (q_limbs, r_limbs) = unsafe {\n            __compute_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n                params,\n                map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                lhs_flags,\n                map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                rhs_flags,\n                map(linear_terms, |bn| Self::get_limbs(bn)),\n                linear_flags,\n            )\n        };\n        (Self { limbs: q_limbs, params }, Self { limbs: r_limbs, params })\n    }\n\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) {\n        evaluate_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n            params,\n            map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            lhs_flags,\n            map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            rhs_flags,\n            map(linear_terms, |bn| Self::get_limbs(bn)),\n            linear_flags,\n        )\n    }\n\n    fn validate_in_field(self: Self) {\n        let params = self.params;\n        validate_in_field::<_, MOD_BITS>(params, self.limbs);\n    }\n\n    fn validate_in_range(self) {\n        validate_in_range::<_, MOD_BITS>(self.limbs);\n    }\n\n    fn assert_is_not_equal(self, other: Self) {\n        let params = self.params;\n        assert(params == other.params);\n        assert_is_not_equal(params, self.limbs, other.limbs);\n    }\n\n    fn neg(self) -> Self {\n        let params = self.params;\n        Self { limbs: neg::<_, MOD_BITS>(params, self.limbs), params }\n    }\n\n    fn udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = udiv_mod::<_, MOD_BITS>(params, self.limbs, divisor.limbs);\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    fn udiv(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: udiv::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    fn umod(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: umod::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        let params = lhs.params;\n        assert(params == rhs.params);\n        Self { limbs: conditional_select(lhs.limbs, rhs.limbs, predicate), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Add for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: add::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Sub for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: sub::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Mul for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: mul::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Div for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: div::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for RuntimeBigNum<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        let params = self.params;\n        assert(params == other.params);\n        eq::<_, MOD_BITS>(params, self.limbs, other.limbs)\n    }\n}\n","path":"/Users/saleel/nargo/github.com/noir-lang/noir-bignumv0.4.1/src/runtime_bignum.nr"},"125":{"source":"use dep::bignum::{params::BigNumParams, RuntimeBigNum};\n\n/**\n * @brief Compare a recovered byte hash from an RSA signature to the original message hash\n * @details Taken from https://github.com/richardliang/noir-rsa\n **/\nfn compare_signature_sha256<let N: u32>(padded_sha256_hash: [u8; N], msg_hash: [u8; 32]) -> bool {\n    // Get length of sig (e.g. 1048 = 128 bytes, 2048 = 256 bytes)\n    // NOTE: Assume MAX_BYTES < 2^32 bit number. MAX_BYTES of 259 > 2^8 bits so need to cast it to u32\n    for i in 0..32 {\n        // Padded hash is reversed\n        assert(padded_sha256_hash[31 - i] == msg_hash[i]);\n    }\n\n    let hash_prefix: [u8; 19] =\n        [32, 4, 0, 5, 1, 2, 4, 3, 101, 1, 72, 134, 96, 9, 6, 13, 48, 49, 48];\n\n    for i in 32..51 {\n        assert(hash_prefix[i - 32] == padded_sha256_hash[i]);\n    }\n\n    assert(padded_sha256_hash[51] == 0);\n\n    // Sub 32 bytes for hash, 19 bytes for prefix, 1 byte for 0, 1 byte for 1, 1 byte for 0\n    let ps_len = N - 54;\n    for i in 52..N {\n        if i < 52 + ps_len {\n            // PS padding which depends on RSA modulus / sig length. 1024 bits = 128 bytes = 128 - 54 = 74 bytes of 0xFF padding\n            assert(padded_sha256_hash[i] == 255);\n        } else if i == 52 + ps_len {\n            // Pad 0x01\n            assert(padded_sha256_hash[i] == 1);\n        } else if i == 53 + ps_len {\n            // 0x00\n            assert(padded_sha256_hash[i] == 0);\n        } else {\n            // Padded with 0 until MAX_BYTES\n            assert(padded_sha256_hash[i] == 0);\n        }\n    }\n\n    true\n}\n\n/**\n * @brief Verify an RSA signature generated via the pkcs1v15 signature scheme.\n * @note The `exponent` can be either 65537 or 3 (i.e. the most common values in use for RSA)\n * Rough cost: 2,048 bit RSA: 26,888 gates per verification\n *             1,024 bit RSA: 11,983 gates per verification\n * A circuit that verifies 1 signature (and does nothing else) will cost ~32k due to initialization costs of lookup tables\n **/\npub fn verify_sha256_pkcs1v15<let NumLimbs: u32, let ModBits: u32>(\n    msg_hash: [u8; 32],\n    sig: RuntimeBigNum<NumLimbs, ModBits>,\n    exponent: u32,\n) -> bool {\n    assert((exponent == 3) | (exponent == 65537), \"Exponent must be 65537 or 3\");\n    let mut exponentiated = sig * sig; // sig^2\n    if exponent == 65537 {\n        // e = 65537 = 1 0000 0000 0000 0001\n        exponentiated = exponentiated * exponentiated; // sig^4\n        exponentiated = exponentiated * exponentiated; // sig^8\n        exponentiated = exponentiated * exponentiated; // sig^16\n        exponentiated = exponentiated * exponentiated; // sig^32\n        exponentiated = exponentiated * exponentiated; // sig^64\n        exponentiated = exponentiated * exponentiated; // sig^128\n        exponentiated = exponentiated * exponentiated; // sig^256\n        exponentiated = exponentiated * exponentiated; // sig^512\n        exponentiated = exponentiated * exponentiated; // sig^1024\n        exponentiated = exponentiated * exponentiated; // sig^2048\n        exponentiated = exponentiated * exponentiated; // sig^4096\n        exponentiated = exponentiated * exponentiated; // sig^8192\n        exponentiated = exponentiated * exponentiated; // sig^16384\n        exponentiated = exponentiated * exponentiated; // sig^32768\n        exponentiated = exponentiated * exponentiated; // sig^65536\n    }\n    // otherwise, e = 3 = 11\n    exponentiated = exponentiated * sig; // either sig^2 * sig = sig^3 or sig^65536 * sig = sig^65537\n    let mut padded_sha256_hash_bytes: [u8; (ModBits + 7) / 8] = exponentiated.to_le_bytes();\n    compare_signature_sha256(padded_sha256_hash_bytes, msg_hash)\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_1024() {\n    // Output of `cargo run -- --msg \"hello world! test#123\" --bits 1024` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world! test#123\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                220, 155, 229, 143, 122, 133, 55, 215, 75, 44, 132, 111, 57, 33, 248, 84, 213, 170,\n                193, 96, 253, 57, 124, 13, 251, 42, 92, 147, 105, 172, 233, 85,\n            ],\n    );\n\n    let params: BigNumParams<9, 1024> = BigNumParams::new(\n        false,\n        [\n            0xab238ad9cb37979a43aefbf10be8fb,\n            0x31347febe45fe8c2dac1dd30900704,\n            0xa5a9a6b9cd0cc2b9d13bbd4e068263,\n            0x5eac6390f7873fe97ff9bb14a173ea,\n            0xbc41f700c91fd733a2c63177bbdbd4,\n            0x41442bd58769a3595b659a2ec9c6be,\n            0x4ddc91395f330382aa2e2d3fbe147,\n            0x3d008ff255a0bc71c7887f5728ba1,\n            0xb640c3a8f511c64e,\n        ],\n        [\n            0x5d53d2634c6a0918266043968ce263,\n            0x5dd4be3dce0323a492ee9340aec4db,\n            0xf82d0e2e5c8319f01a460c72c01854,\n            0x236e6fc6e62e8a1d522acda5fb3892,\n            0xdaf755619d66e580901aa224d03174,\n            0x8366291616480e7e1f202dbcedda87,\n            0x40ba1202537d1e94561ccc05265586,\n            0x69b993d857ba89ea5de9822aeb4b93,\n            0x167968c0000761a273,\n        ],\n    );\n\n    let signature: RuntimeBigNum<9, 1024> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xc3850e84ea02da3f028ff422f4d6a9,\n            0x9761f0bd9021f76d45c60df0670a19,\n            0xc1ede421a43607ab623ed4d5a17fc8,\n            0x86197b4315206f4d53200b42555831,\n            0xe95783b69db28c26a83706f39d04cd,\n            0x18b178dc1a9ec76fb22b57e4dfa703,\n            0xdd0e19cd5a09ab48e7af4d0e3470e3,\n            0x10004dfab1cf91304e80e6baa4dfc7,\n            0x241c3fd77b90adef,\n        ],\n    };\n\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048() {\n    // Output of `cargo run -- --msg \"Hello World! This is Noir-RSA\"` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                91, 207, 46, 60, 22, 153, 217, 144, 2, 127, 224, 143, 181, 45, 32, 120, 122, 131,\n                166, 79, 166, 183, 43, 158, 116, 105, 73, 207, 196, 77, 33, 5,\n            ],\n    );\n\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0x8d5e7d9daedd6cfd1c9bdf0227e05b,\n            0xbfb937fc4d3cf02cc0af780f3cab44,\n            0xd20637ef7adcf5d238ee87bccc9bca,\n            0xb9db4f2663108e2f8b673f7612ae8b,\n            0x85f894ef669b36bfd3d86b0a28873,\n            0xdcc70e1884e38b8229cce3b884121d,\n            0x35488d1138e0b03e1676f7f5d8a5b3,\n            0xe1a97820e7dcbb4eab35c9b71bb273,\n            0x97d19eb3c63249ddbfcff915863f54,\n            0x3a78c7af6da0f6af0d67b1ca4b6065,\n            0xd7a3c433c020f624821e5e678c7d69,\n            0x52d5b53240feae82ffea3d2a3d9b09,\n            0xb8aad5e19e2163f68997c6fdd71906,\n            0x5db432d06e8b0bf59511100c7894e2,\n            0xadc0bbc4c54da10d1cc88438ea3127,\n            0xece1cf6a1501109cd2734d5893c8d9,\n            0x7196b90acdf06c31b1288064fd0c27,\n            0xc8,\n        ],\n        [\n            0x1b1deccf4dbde852c34a5d6908a0f,\n            0xbc9e5bdab22f023fbcca58692bccf5,\n            0x1f65439685623e45396ff55751c3bf,\n            0x2b6ad2c5f8e3aac15d0ccbab816bfa,\n            0x5ca2e8e3048243c16c708a8030ab0d,\n            0x30079bfeb1fa51e5501581173ca19c,\n            0xff8d5f6bea485fdcc2716327f69ab4,\n            0x36b599d81589416b5b5f037986b999,\n            0x75612e34a4ff29f0a19a7823512f58,\n            0x288b6897929b54c3b26a5faa07c00f,\n            0x4b5675fa13ab7444f1f047d3eb1bbe,\n            0x6ba0ac610ef9f267ab30fe25bb1c84,\n            0xa386b48ee03168d5cea3ecb9dc901f,\n            0xacf1a01f7dba44e050c976142fb1f6,\n            0x97a63b5cb7efc60d3502946aec63cf,\n            0x12cc1d5cab10a1e9e2398d29b9e3ef,\n            0x4635cf25c66e76bba8034df46204fb,\n            0x146f,\n        ],\n    );\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xad29e07d16a278de49a371b9760a27,\n            0x86311920cc0e17a3c20cdff4c56dbb,\n            0x863556c6c5247dd83668dd825716ae,\n            0xc247c960945f4485b46c33b87425ca,\n            0x7326463c5c4cd5b08e21b938d9ed9a,\n            0x4f89fe0c82da08a0259eddb34d0da1,\n            0x43a74e76d4e1bd2666f1591889af0d,\n            0x240f7b80f0ff29f4253ee3019f832d,\n            0xc6edd131fbaaf725fd423dac52b362,\n            0x85f9732679242163e8afff44f6104d,\n            0xd3c3bbcb1757013fd6fb80f31dd9a6,\n            0x9008633f15df440e6df6d21ee585a2,\n            0x324df3425ed256e283be5b6b761741,\n            0xc60c1302929bd0e07caa4aeff4e8fd,\n            0x600d804ff13ba8d0e1bc9508714212,\n            0x50f7e75e5751d7edd61167027926be,\n            0x0db41d39442023e1420a8a84fe81d9,\n            0xab,\n        ],\n    };\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048_exponent_3() {\n    // Output of `cargo run -- --msg \"hello world\" -e 3` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                185, 77, 39, 185, 147, 77, 62, 8, 165, 46, 82, 215, 218, 125, 171, 250, 196, 132,\n                239, 227, 122, 83, 128, 238, 144, 136, 247, 172, 226, 239, 205, 233,\n            ],\n    );\n\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0xe40ee47801326543c8e84b85d567c1,\n            0x5b54ea87f0ce29de1995697b0696fd,\n            0x457078f8fdce68b437cac0970b2452,\n            0x473ec776fee3731b6ab06e35875ddc,\n            0x62dedd594e5f12c80c3ccb5791a6cd,\n            0xecb934b9d8272c5e3a418145345499,\n            0xd1af643b3d785470ed0c6cd633f706,\n            0xb58a57b9e96eccbdfc7c17f0333d4,\n            0x2ebd34b5039fc596504927c282c60d,\n            0x3a44928a74f25fc1043bb37ce4dfa8,\n            0x91448459f9617fac33a2816162ac9e,\n            0x70cb910d9f3e1a78864640ec6c8240,\n            0x9aed33f6b31f1c9de67248a98c180,\n            0x7f1416e032c79488c94b311e87bd9c,\n            0x7191b4ebb1b3fffa949fa48ed01e5,\n            0x350a75cbaeca6bfdd71ca83cdbcae9,\n            0xfb1d274fa207457c6814d42c09f9cf,\n            0xd4,\n        ],\n        [\n            0x803bf4d38110a7d37fdd05f590dee9,\n            0xa68d317c933f37cab5ab4e7c00a3b9,\n            0x476a05a536bf5f2aa1b8850146cba7,\n            0xca297ea8b5528d91d4836ff27c30ab,\n            0x75cf2eaab76eefa12bbd570f1aea9f,\n            0x8f6a8ab877d9c5bcd98c37bdc5c2d3,\n            0xd497db1f6ebe83decacaa647fabea6,\n            0x686b27ca330e25e7a7cf197f6433ef,\n            0xfde04d2225c8308b07580af0058a0f,\n            0xa29fb69777c0e916976243b2b09855,\n            0xf983592285852e7e1c2cb3ae968323,\n            0x673608017f9f5acf67a01b73728d70,\n            0xeeff82521c0bc432a05f4b7444fac0,\n            0x85a89c4d229f60aaa3aa7ac7dac1e2,\n            0xcfecff93bc9fbfe0d6dff6091f2db8,\n            0xf20f047dcb224b4447bd098c07f8c2,\n            0x554bb53cadeb3eaab911a189f90227,\n            0x133b,\n        ],\n    );\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xa250eff812c63eaaeaa3f04641c05f,\n            0xecc09613cb8b289c1f37c8f92e6a05,\n            0x2c0a0510058360c07af65d46f594fd,\n            0x943d67513363d3de430c94a1dafe7c,\n            0x511ec8e9b10bc6c6ff0d6c232ccf92,\n            0x50ffd07b3c093b3f5fc027de847731,\n            0xc268e1489449943fdafdf89ff168c3,\n            0x0b8b7f9f49b492f78fda58d252f23a,\n            0x491c6c4ef836a6a8730b7bf81e865e,\n            0x8746c75fb079d014e419543f56d7f0,\n            0x65804c417d6168a8bc0025d255cebf,\n            0xf695e91b77890b8e3fd775fa56e627,\n            0x5e90001c0218550f4083ae28025a2f,\n            0x526bd4eff34f25f62a698f0470e0a6,\n            0x7f224306a7d9daf536b1559434c6c6,\n            0x88809f16fe1fcea3c87511d9319735,\n            0x7694685fee0bfab4a9196b92ec6f2e,\n            0xa7,\n        ],\n    };\n\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 3));\n}\n","path":"/Users/saleel/nargo/github.com/noir-lang/noir_rsav0.4.0/lib/src/rsa.nr"},"126":{"source":"mod utils;\n\npub use utils::{conditional_select, lt_f, DebugRandomEngine};\n\n/**\n * @brief represents a byte-array of up to MaxBytes, that is used as a \"haystack\" array,\n *        where we want to validate a substring \"needle\" is present in the \"haystack\"\n * @details the \"body\" parameter contains some input bytes, zero-padded to the nearest multiple of 31\n *          We pack \"bytes\" into 31-byte \"chunks\", as this is the maximum number of bytes we can fit\n *          into a field element without overflowing.\n *          TODO: once we can derive generics via arithmetic on other generics, we want this \"31\" parameter\n *          to be defined by the backend being used instead of being hardcoded to 31\n *\n * @note We perform this 31-byte packing because it dramatically reduces the number of constraints required for substring matching. See (chicken)\n *\n * @tparam MaxBytes: the maximum number of bytes that StringBody can contain\n * @tparam MaxPaddedBytes: the maximum number of bytes after zero-padding to the nearest multiple of 31\n * @tparam PaddedChunks: the number of 31-byte chunks needed to represent MaxPaddedBytes\n **/\npub struct StringBody<let MaxPaddedBytes: u32, let PaddedChunks: u32, let MaxBytes: u32> {\n    pub body: [u8; MaxPaddedBytes],\n    chunks: [Field; PaddedChunks],\n    pub byte_length: u32,\n}\n\n/**\n * @brief represents a byte-array of up to MaxBytes, that is used as a \"needle\" array,\n *        where we want to validate a substring \"needle\" is present in the \"haystack\"\n * @tparam MaxBytes: the maximum number of bytes that StringBody can contain\n * @tparam MaxPaddedBytes: the maximum number of bytes after zero-padding to the nearest multiple of 31\n * @tparam PaddedChunksMinusOne: the number of 31-byte chunks needed to represent MaxPaddedBytes minus one!\n *\n * @note PaddedChunksMinusOne is because we are going to do the following:\n *                            1. align the SubString bytes according to the StringBody bytes being matched against\n *                            2. split the aligned bytes into 31-byte chunks. The 1st and last chunks might contain\n *                               fewer than 31 bytes due to the above alignment\n *                            3. validate the aligned-byte-chunks match the StringBody byte chunks\n *       To account for the fact that the 1st and last chunks might have fewer bytes we treat those separately\n *       The param PaddedChunksMinusOne is the number of 31-byte chunks required to represent SubString *EXCLUDING* the initial and final chunks\n */\npub struct SubString<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> {\n    pub body: [u8; MaxPaddedBytes],\n    pub byte_length: u32,\n}\n\npub type StringBody32 = StringBody<62, 2, 32>;\npub type StringBody64 = StringBody<93, 3, 64>;\npub type StringBody128 = StringBody<155, 5, 128>;\npub type StringBody256 = StringBody<279, 9, 256>;\npub type StringBody512 = StringBody<527, 17, 512>;\npub type StringBody1024 = StringBody<1054, 34, 1024>;\npub type StringBody2048 = StringBody<2077, 67, 2048>;\npub type StringBody4096 = StringBody<4123, 133, 4096>;\npub type StringBody8192 = StringBody<8215, 265, 8192>;\npub type StringBody16384 = StringBody<16399, 529, 16384>;\n\npub type SubString32 = SubString<62, 1, 32>;\npub type SubString64 = SubString<93, 2, 64>;\npub type SubString128 = SubString<155, 4, 128>;\npub type SubString256 = SubString<279, 8, 256>;\npub type SubString512 = SubString<527, 16, 512>;\npub type SubString1024 = SubString<1054, 33, 1024>;\n\npub trait SubStringTrait {\n    fn match_chunks<let HaystackChunks: u32>(\n        self,\n        haystack: [Field; HaystackChunks],\n        num_bytes_in_first_chunk: Field,\n        body_chunk_offset: Field,\n        num_full_chunks: Field,\n    );\n\n    fn len(self) -> u32;\n    fn get(self, idx: Field) -> u8;\n    fn get_body(self) -> [u8];\n}\n\n// ######################################################\n// S U B S T R I N G\n// ######################################################\nimpl<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> SubString<MaxPaddedBytes, PaddedChunksMinusOne, MaxBytes> {\n\n    /**\n     * @brief construct a SubString object from an input byte array\n     * @details the input byte array must have a number of bytes less than or equal to MaxBytes\n     **/\n    fn new<let InputBytes: u32>(input: [u8; InputBytes], input_length: u32) -> Self {\n        assert(MaxBytes <= MaxPaddedBytes);\n        assert(input_length <= MaxBytes);\n        assert(InputBytes <= MaxBytes);\n        let mut body: [u8; MaxPaddedBytes] = [0; MaxPaddedBytes];\n        for i in 0..InputBytes {\n            body[i] = input[i];\n        }\n        SubString { body, byte_length: input_length }\n    }\n\n    /**\n     * @brief concatenate two SubString objects together\n     * @details each SubString can have different MaxBytes sizes, however we need OtherBytes <= MaxBytes\n     *          (use concat_into for cases where this is not the case)\n     **/\n    fn concat<let OtherPaddedBytes: u32, let OtherPaddedChunks: u32, let OtherMaxBytes: u32>(\n        self,\n        other: SubString<OtherPaddedBytes, OtherPaddedChunks, OtherMaxBytes>,\n    ) -> Self {\n        assert(\n            OtherPaddedBytes <= MaxPaddedBytes,\n            \"SubString::concat. SubString being concatted has larger max length. Try calling concat_into\",\n        );\n        assert(\n            self.byte_length + other.byte_length <= MaxPaddedBytes,\n            \"SubString::concat, concatenated string exceeds MaxPaddedBytes\",\n        );\n        let mut body = self.body;\n        let offset: u32 = self.byte_length;\n        for i in 0..MaxPaddedBytes {\n            if (i + offset < MaxPaddedBytes) {\n                body[i + offset] = other.body[i];\n            }\n        }\n        SubString { body, byte_length: self.byte_length + other.byte_length }\n    }\n\n    /**\n     * @brief concatenate two SubString objects together. Return type has OtherPaddedBytes max bytes\n     * @details each SubString can have different MaxBytes sizes, however we need MaxBytes <= OtherBytes\n     *          (use concat for cases where this is not the case)\n     **/\n    fn concat_into<let OtherPaddedBytes: u32, let OtherPaddedChunks: u32, let OtherMaxBytes: u32>(\n        self,\n        other: SubString<OtherPaddedBytes, OtherPaddedChunks, OtherMaxBytes>,\n    ) -> SubString<OtherPaddedBytes, OtherPaddedChunks, OtherMaxBytes> {\n        assert(\n            MaxPaddedBytes <= OtherPaddedBytes,\n            \"SubString::concat_into. SubString being concat has larger max length. Try calling concat\",\n        );\n        assert(\n            self.byte_length + other.byte_length <= OtherPaddedBytes,\n            \"SubString::concat_into, concatenated string exceeds MaxPaddedBytes\",\n        );\n        let mut body: [u8; OtherPaddedBytes] = [0; OtherPaddedBytes];\n        for i in 0..MaxBytes {\n            body[i] = self.body[i];\n        }\n\n        let offset: u32 = self.byte_length;\n        for i in 0..OtherPaddedBytes {\n            if (i + offset < OtherPaddedBytes) {\n                body[i + offset] = other.body[i];\n            }\n        }\n        SubString { body, byte_length: self.byte_length + other.byte_length }\n    }\n}\n\nimpl<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> SubStringTrait for SubString<MaxPaddedBytes, PaddedChunksMinusOne, MaxBytes> {\n\n    fn len(self) -> u32 {\n        self.byte_length\n    }\n    fn get(self, idx: Field) -> u8 {\n        self.body[idx]\n    }\n    fn get_body(self) -> [u8] {\n        let x = self.body.as_slice();\n        x\n    }\n\n    /**\n     * @brief given some `haystack` 31-byte chunks, validate that there exist `num_full_chunks`\n     *        in the SubString, starting at byte position `starting_needle_byte`.\n     *        The selected chunks must be equal to the haystack chunks starting at `starting_haystack_chunk`\n     **/\n    fn match_chunks<let HaystackChunks: u32>(\n        self,\n        haystack: [Field; HaystackChunks],\n        starting_needle_byte: Field,\n        starting_haystack_chunk: Field,\n        num_full_chunks: Field,\n    ) {\n        let mut substring_chunks: [Field; PaddedChunksMinusOne] = [0; PaddedChunksMinusOne];\n        // pack the substring into 31 byte chunks.\n        // This is fairly expensive as we need a ROM table to access the SubString.body\n        // which is 2 gates per byte\n        for i in 0..PaddedChunksMinusOne {\n            let mut slice: Field = 0;\n            for j in 0..31 {\n                slice *= 256;\n                let substring_idx = starting_needle_byte as Field + (i as Field * 31) + j as Field;\n                let mut byte = self.body[substring_idx];\n                slice += byte as Field;\n            }\n            std::as_witness(slice);\n            substring_chunks[i] = slice;\n        }\n        // iterate over the needle chunks and validate they match the haystack chunks\n        for i in 0..PaddedChunksMinusOne {\n            let predicate: Field = lt_f(i as Field, num_full_chunks) as Field;\n            let lhs = substring_chunks[i];\n            let rhs = haystack[predicate as Field * (i as Field + starting_haystack_chunk)];\n            assert(predicate * (lhs - rhs) == 0);\n        }\n    }\n}\n\n// ######################################################\n// S T R I N G   B O D Y\n// ######################################################\nimpl<let MaxPaddedBytes: u32, let PaddedChunks: u32, let MaxBytes: u32> StringBody<MaxPaddedBytes, PaddedChunks, MaxBytes> {\n\n    /**\n     * @brief construct a StringBody object from an input byte array\n     * @details the input byte array must have a number of bytes less than or equal to MaxBytes\n     **/\n    fn new<let InputBytes: u32>(data: [u8; InputBytes], length: u32) -> Self {\n        assert(length <= MaxBytes);\n        assert(length <= InputBytes);\n        let mut body: [u8; MaxPaddedBytes] = [0; MaxPaddedBytes];\n        for i in 0..InputBytes {\n            body[i] = data[i];\n        }\n        StringBody { body, chunks: compute_chunks(body), byte_length: length }\n    }\n\n    /**\n     * @brief Validate a substring exists in the StringBody. Returns a success flag and the position within the StringBody that the match was found\n     **/\n    fn substring_match<NeedleSubString>(self, substring: NeedleSubString) -> (bool, u32)\n    where\n        NeedleSubString: SubStringTrait,\n    {\n        // use unconstrained function to determine:\n        // a: is the substring present in the body text\n        // b: the position of the first match in the body text\n        let position: u32 = unsafe {\n            // Safety: The rest of this function checks this.\n            utils::search(\n                self.body,\n                substring.get_body(),\n                self.byte_length,\n                substring.len(),\n            )\n        };\n\n        assert(\n            position + substring.len() <= self.byte_length,\n            \"substring not present in main text (match found if a padding text included. is main text correctly formatted?)\",\n        );\n        let substring_length = substring.len();\n\n        // chunk_index = which 31-byte haystack chunk does the needle begin in?\n        let chunk_index: u32 = position / 31;\n        // chunk_offset = how many haystack bytes are present in the 1st haystack chunk?\n        let chunk_offset: u32 = position % 31;\n        // how many needle bytes are in 1st haystack chunk?\n        let num_bytes_in_first_chunk: u32 = 31 - chunk_offset;\n        let mut starting_needle_byte_index_of_final_chunk: Field = 0;\n        let mut chunk_index_of_final_haystack_chunk_with_matching_needle_bytes: Field = 0;\n        let mut num_full_chunks = 0;\n\n        // is there only one haystack chunk that contains needle bytes?\n        let merge_initial_final_needle_chunks =\n            lt_f(substring_length as Field, num_bytes_in_first_chunk as Field);\n\n        // if the above is false...\n        if (!merge_initial_final_needle_chunks) {\n            // compute how many full 31-byte haystack chunks contain 31 needle bytes\n            num_full_chunks = (substring_length - num_bytes_in_first_chunk) / 31;\n            // for the final haystack chunk that contains needle bytes, where in the needle does this chunk begin?\n            starting_needle_byte_index_of_final_chunk =\n                num_full_chunks as Field * 31 + num_bytes_in_first_chunk as Field;\n            // what is the index of the final haystack chunk that contains needle bytes?\n            chunk_index_of_final_haystack_chunk_with_matching_needle_bytes =\n                num_full_chunks as Field + chunk_index as Field + 1;\n        } else {\n            starting_needle_byte_index_of_final_chunk = 0;\n            // if the needle bytes does NOT span more than 1 haystack chunk,\n            // the final haystack index will be the same as the initial haystack index\n            chunk_index_of_final_haystack_chunk_with_matching_needle_bytes = chunk_index as Field;\n        }\n\n        // To minimize the number of comparisons between the haystack bytes and the needle bytes,\n        // we pack both the haystack bytes and needle bytes into 31-byte Field \"chunks\" and compare chunks.\n        // To do this correctly, we need to align the needle chunks with the haystack chunks\n        /*\n            e.g. consider a toy example where we pack 3 bytes into a chunk\n            haystack: [VWXZYABCDEQRSTU]\n            needle: [ABCDE]\n        when constructing needle chunks, we need to align according to where the needle is located in the haystack\n            haystack chunks:   [VWX] [ZYA] [BCD] [EQR] [STU]\n                                      _..   ...   .__\n            processed needle chunks: [ZYA] [BCD] [EQR]\n        a \"_\" symbole means that a chunk byte has been sourced from the haystack bytes,\n            a \".\" symbol means a byte is sourced from the needle bytes\n        Both the initial and final chunks of the processed needle are \"composite\" constructions.\n            If chunk byte index < `position` or is > `position + needle length\", byte is sourced from haystack, otherwise byte is sourced from needle\n        The way we execute this in code is to define an \"initial\" needle chunk and a \"final\" needle chunk.\n            Num needle bytes in initial chunk = position % 31\n            Num needle bytes in final chunk = (needle_length - (position % 31)) % 31\n        If needle_length < 31 then the \"initial\" and \"final\" chunks\n            are actually the *same* chunk and we must perform a merge operation\n            (see later in algo for comments)\n        */\n        // instead of directly reading haystack bytes, we derive the bytes from the haystack chunks.\n        // This way we don't have to instantiate the haystack bytes as a ROM table, which would cost 2 * haystack.length gates\n        let offset_to_first_needle_byte_in_chunk: Field = chunk_offset as Field;\n        let initial_haystack_chunk = self.chunks[chunk_index];\n        let final_haystack_chunk =\n            self.chunks[chunk_index_of_final_haystack_chunk_with_matching_needle_bytes];\n\n        let initial_body_bytes: [u8; 31] = initial_haystack_chunk.to_be_bytes();\n        let final_body_bytes: [u8; 31] = final_haystack_chunk.to_be_bytes();\n\n        // When defining the initial chunk bytes, we can represent as Field elements as we are deriving values from known bytes.\n        // This saves us a few gates\n        let mut initial_chunk: [Field; 31] = [0; 31];\n        let mut final_chunk: [Field; 31] = [0; 31];\n        for i in 0..31 {\n            // if i < offset_to_first_needle_byte_in_chunk, we read from the haystack\n            // otherwise we read from the needle\n            // n.b. this can be done with an if statement, but the following code produces fewer constraints\n            let idx: Field = i as Field;\n            let predicate: Field = lt_f(i as Field, offset_to_first_needle_byte_in_chunk) as Field;\n            let lhs: Field = initial_body_bytes[i] as Field;\n            // if i < offset_to_first_needle_byte_in_chunk then `idx - offset_to_first_needle_byte_in_chunk` is negative\n            // to ensure we access array correctly we need to set the lookup index to 0 if predicate = 0\n            let substring_idx = (1 - predicate) * (idx - offset_to_first_needle_byte_in_chunk);\n            let rhs: Field = substring.get(substring_idx) as Field;\n            let byte: Field = predicate * (lhs - rhs) + rhs;\n            initial_chunk[i] = byte;\n        }\n\n        // If `merge_initial_final_needle_chunks = true`, `final_chunk` will contain the full needle data,\n        // this requires some complex logic to determine where we are sourcing the needle bytes from.\n        // Either they come from the `initial_chunk`, the haystack bytes or the substring bytes.\n        for i in 0..31 {\n            let mut lhs_index: Field =\n                starting_needle_byte_index_of_final_chunk as Field + i as Field;\n            let predicate = lt_f(lhs_index, substring_length as Field);\n\n            /*\n                | merge_initial_final_needle_chunks | predicate | byte_source              |\n                | false                             | false     | body_bytes[i]            |\n                | false                             | true      | substring[lhs_idx]       |\n                | true                              | false     | body_bytes[i]            |\n                | true                              | true      | initial_chunk[lhs_index] |\n            NOTE: if `merge = true` and `predicate = true`, we read from `initial_chunk` to short-circuit some extra logic.\n                      if `initial_chunk` did not exist, then we would need to validate whether `i < offset_to_first_needle_byte_in_chunk`.\n                      if true, the byte source would be body_bytes, otherwise the source would be substring bytes\n            */\n            let byte_from_substring = substring.get(lhs_index) as Field;\n            let byte_from_initial_chunk = initial_chunk[i] as Field;\n            let byte_from_haystack = final_body_bytes[i] as Field;\n\n            // TODO: find out why this cuts 1 gate per iteration\n            std::as_witness(byte_from_initial_chunk);\n\n            let p = predicate as Field;\n            let m = merge_initial_final_needle_chunks as Field;\n            // p * (m * (a - b) + (b - c)) + c\n            let ab = byte_from_initial_chunk - byte_from_substring;\n            std::as_witness(ab);\n            let bc = byte_from_substring - byte_from_haystack;\n            let t0 = m * ab + bc;\n            let destination_byte = p * t0 + byte_from_haystack;\n\n            final_chunk[i] = destination_byte;\n        }\n\n        // TODO: moving this above the previous code block adds 31 gates. find out why? :/\n        let mut initial_needle_chunk: Field = 0;\n        let mut final_needle_chunk: Field = 0;\n\n        // Construct the initial and final needle chunks from the byte arrays we previously built.\n        // Validate they match the initial and final haystack chunks\n        for i in 0..31 {\n            initial_needle_chunk *= 256;\n            initial_needle_chunk += initial_chunk[i];\n            final_needle_chunk *= 256;\n            final_needle_chunk += final_chunk[i];\n        }\n\n        std::as_witness(initial_needle_chunk);\n        std::as_witness(final_needle_chunk);\n\n        initial_needle_chunk = merge_initial_final_needle_chunks as Field\n            * (final_needle_chunk - initial_needle_chunk)\n            + initial_needle_chunk;\n        assert(initial_needle_chunk == initial_haystack_chunk);\n        assert(final_needle_chunk == final_haystack_chunk);\n\n        // Step 3: Construct needle chunks (for all but the 1st and last chunks) and validate they match the haystack chunks.\n        //         This part is much simpler as we know that all bytes in the chunk are sourced from the needle chunk.\n        // NOTE:   If we chose to not pack bytes into 31-byte chunks, the string matching algorithm would be simpler but more expensive.\n        //         Instead of matching chunks with each other, we would match individual byte values.\n        //         i.e. the number of iterations in this loop would be 31x greater\n        //         each loop iteration would also require a predicate, to check whether the byte index was within the needle range or not\n        //         Combined these two operations would add about 10 gates per loop iteration,\n        //         combined with a 31x iteration length would make this algorithm much more costly than the chunked variant\n        let body_chunk_offset: Field = chunk_index as Field + 1;\n        substring.match_chunks(\n            self.chunks,\n            num_bytes_in_first_chunk as Field,\n            body_chunk_offset,\n            num_full_chunks as Field,\n        );\n        (true, position)\n    }\n}\n\n/// Given an input byte array, convert into 31-byte chunks\n///\n/// Cost: ~0.5 gates per byte\nfn compute_chunks<let MaxPaddedBytes: u32, let PaddedChunks: u32>(\n    body: [u8; MaxPaddedBytes],\n) -> [Field; PaddedChunks] {\n    let mut chunks: [Field; PaddedChunks] = [0; PaddedChunks];\n    for i in 0..PaddedChunks {\n        let mut limb: Field = 0;\n        for j in 0..31 {\n            limb *= 256;\n            limb += body[i * 31 + j] as Field;\n        }\n        chunks[i] = limb;\n        std::as_witness(chunks[i]);\n    }\n    chunks\n}\n\n#[test]\nfn test() {\n    let haystack_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n        .as_bytes();\n    let needle_text = \" dolor in reprehenderit in voluptate velit esse\".as_bytes();\n\n    let mut haystack: StringBody512 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString64 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_small_needle() {\n    let haystack_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n        .as_bytes();\n    let needle_text = \"olor\".as_bytes();\n    let mut haystack: StringBody512 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString32 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_needle_aligned_on_byte_boundary() {\n    let haystack_text = \"the quick brown fox jumped over the lazy dog\".as_bytes();\n    let needle_text = \" the lazy dog\".as_bytes();\n\n    let mut haystack: StringBody256 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString256 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_needle_haystack_equal_size() {\n    let haystack_text =\n        \"the quick brown fox jumped over the lazy dog lorem ipsum blahhhh\".as_bytes();\n    let needle_text = \"the quick brown fox jumped over the lazy dog lorem ipsum blahhhh\".as_bytes();\n\n    let mut haystack: StringBody64 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString64 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_concat() {\n    let email_text = \"account recovery for Bartholomew Fibblesworth\".as_bytes();\n    let username = \"Bartholomew Fibblesworth\".as_bytes();\n    let mut padded_email_text: [u8; 256] = [0; 256];\n    let mut padded_username: [u8; 100] = [0; 100];\n    for i in 0..username.len() {\n        padded_username[i] = username[i];\n    }\n    for i in 0..email_text.len() {\n        padded_email_text[i] = email_text[i];\n    }\n    let needle_text_init = \"account recovery for \".as_bytes();\n\n    let needle_start: SubString128 = SubString::new(needle_text_init, needle_text_init.len());\n    let needle_end: SubString128 = SubString::new(padded_username, username.len());\n    let needle = needle_start.concat(needle_end);\n\n    for i in 0..45 {\n        assert(needle.body[i] == email_text[i]);\n    }\n\n    let haystack: StringBody256 = StringBody::new(padded_email_text, 200);\n    let (result, _): (bool, u32) = haystack.substring_match(needle);\n    assert(result == true);\n}\n\n#[test]\nfn test_concat_into() {\n    let email_text = \"account recovery for Bartholomew Fibblesworth\".as_bytes();\n    let username = \"Bartholomew Fibblesworth\".as_bytes();\n    let mut padded_email_text: [u8; 256] = [0; 256];\n    let mut padded_username: [u8; 100] = [0; 100];\n    for i in 0..username.len() {\n        padded_username[i] = username[i];\n    }\n    for i in 0..email_text.len() {\n        padded_email_text[i] = email_text[i];\n    }\n    let needle_text_init = \"account recovery for \".as_bytes();\n\n    let needle_start: SubString32 = SubString::new(needle_text_init, needle_text_init.len());\n    let needle_end: SubString128 = SubString::new(padded_username, username.len());\n    let needle = needle_start.concat_into(needle_end);\n\n    for i in 0..45 {\n        assert(needle.body[i] == email_text[i]);\n    }\n\n    let haystack: StringBody256 = StringBody::new(padded_email_text, 200);\n    let (result, _): (bool, u32) = haystack.substring_match(needle);\n    assert(result == true);\n}\n\n#[test]\nunconstrained fn test_partial_match() {\n    let mut Engine = DebugRandomEngine { seed: 0 };\n    let mut foo: [u8; 1024] = Engine.get_random_bytes();\n    let mut bar: [u8; 128] = [0; 128];\n    for i in 0..128 {\n        bar[i] = foo[i + 123];\n    }\n    let position = utils::search(foo, bar.as_slice(), 1024, 128);\n\n    assert(position == 123);\n}\n","path":"/Users/saleel/nargo/github.com/olehmisar/noir_string_searchv0.3.0/src/lib.nr"},"127":{"source":"pub unconstrained fn search<let N: u32>(\n    haystack: [u8; N],\n    needle: [u8],\n    haystack_length: u32,\n    needle_length: u32,\n) -> u32 {\n    assert(needle_length > 0, \"needle length of size 0 not supported\");\n    assert(haystack_length > 0, \"haystack length of size 0 not supported\");\n    let mut found = false;\n    let mut found_index: u32 = 0;\n    for i in 0..haystack_length - needle_length + 1 {\n        if (found == true) {\n            break;\n        }\n        for j in 0..needle_length {\n            if haystack[i + j] != needle[j] {\n                break;\n            } else if (j == needle_length - 1) {\n                found = true;\n            }\n            if (found == true) {\n                found_index = i;\n                break;\n            }\n        }\n    }\n    assert(found == true, \"utils::search could not find needle in haystack\");\n    found_index\n}\n\nunconstrained fn __conditional_select(lhs: u8, rhs: u8, predicate: bool) -> u8 {\n    if (predicate) {\n        lhs\n    } else {\n        rhs\n    }\n}\n\npub fn conditional_select<T>(lhs: u8, rhs: u8, predicate: bool) -> u8 {\n    // Safety: This is all just a very verbose `if (predicate) { lhs } else { rhs }`\n    // formulated as `rhs + (lhs - rhs) * predicate`\n    unsafe {\n        let result = __conditional_select(lhs, rhs, predicate);\n        let result_f = result as Field;\n        let lhs_f = lhs as Field;\n        let rhs_f = rhs as Field;\n\n        let diff = lhs_f - rhs_f;\n        std::as_witness(diff);\n        assert_eq((predicate as Field) * diff + rhs_f, result_f);\n        result\n    }\n}\n\npub unconstrained fn get_lt_predicate_f(x: Field, y: Field) -> bool {\n    let a = x as u32;\n    let b = y as u32;\n    a < b\n}\n\npub fn lt_f(x: Field, y: Field) -> bool {\n    // Safety: As `x` and `y` are known to be valid `u32`s, this function reimplements the\n    // compiler's internal implementation of `lt`\n    unsafe {\n        let predicate = get_lt_predicate_f(x, y);\n        let delta = y as Field - x as Field;\n        let lt_parameter = 2 * (predicate as Field) * delta - predicate as Field - delta;\n        lt_parameter.assert_max_bit_size::<32>();\n\n        predicate\n    }\n}\n\npub struct DebugRandomEngine {\n    pub seed: Field,\n}\n\nimpl DebugRandomEngine {\n    unconstrained fn get_random_32_bytes(&mut self) -> [u8; 32] {\n        self.seed += 1;\n        let input: [u8; 32] = self.seed.to_be_bytes();\n        let hash: [u8; 32] = dep::std::hash::sha256(input);\n        hash\n    }\n    unconstrained fn get_random_field(&mut self) -> Field {\n        let hash = self.get_random_32_bytes();\n        let mut result: Field = 0;\n        for i in 0..32 {\n            result *= 256;\n            result += hash[i] as Field;\n        }\n        result\n    }\n\n    pub unconstrained fn get_random_bytes<let NBytes: u32>(&mut self) -> [u8; NBytes] {\n        let num_chunks = (NBytes / 32) + ((NBytes % 32) != 0) as u32;\n\n        let mut result: [u8; NBytes] = [0; NBytes];\n        for i in 0..num_chunks - 1 {\n            let bytes = self.get_random_32_bytes();\n            for j in 0..32 {\n                result[i * 32 + j] = bytes[j];\n            }\n        }\n\n        let bytes = self.get_random_32_bytes();\n        for j in 0..(NBytes - (num_chunks - 1) * 32) {\n            result[(num_chunks - 1) * 32 + j] = bytes[j];\n        }\n        result\n    }\n}\n","path":"/Users/saleel/nargo/github.com/olehmisar/noir_string_searchv0.3.0/src/utils.nr"},"136":{"source":"use std::runtime::is_unconstrained;\nuse std::hash::sha256_compression;\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L23\n// Convert 64-byte array to array of 16 u32s\npub fn msg_u8_to_u32(msg: [u8; BLOCK_SIZE]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L38\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u32, msg_start: u32) -> ([u8; BLOCK_SIZE], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L59\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L86-L116\n/**\n * Partially computes a SHA256 hash of a message but does not finalize\n * @notice can be used for post-partial hashing where client proves part of hash and relies on server to finish\n *\n * @param N: the maximum length of the message to hash\n * @param msg: the preimage to begin hashing\n * @param message_size: the actual length of the preimage to hash\n * @return the intermediate hash state\n */\npub fn partial_sha256_var_start<let N: u32>(msg: [u8; N]) -> [u32; 8] {\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, N, msg_start)\n        };\n        if msg_start < N {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, N, msg_block, msg_start);\n            if msg_start < N {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < N {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < N) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    h\n}\n\n/**\n * Given some state of a partially computed sha256 hash and part of the preimage, continue hashing\n * @notice used for complex/ recursive offloading of post-partial hashing\n *\n * @param N - the maximum length of the message to hash\n * @param h - the intermediate hash state\n * @param msg - the preimage to hash\n * @param message_size - the actual length of the preimage to hash\n * @return the intermediate hash state after compressing in msg to h\n */\npub fn partial_sha256_var_interstitial<let N: u32>(mut h: [u32; 8], msg: [u8; N], message_size: u32) -> [u32; 8] {\n    assert(message_size % BLOCK_SIZE == 0, \"Message size must be a multiple of the block size\");\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, N, msg_start)\n        };\n        if msg_start < N {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, N, msg_block, msg_start);\n            if msg_start < N {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < N {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < N) & (msg_byte_ptr == BLOCK_SIZE) & (msg_start < message_size){\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    h\n}\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L85\n/**\n * Given some state of a partially computed sha256 hash and remaining preimage, complete the hash\n * @notice used for traditional partial hashing\n *\n * @param N - the maximum length of the message to hash\n * @param h - the intermediate hash state\n * @param msg - the remaining preimage to hash\n * @param message_size - the size of the remaining preimage\n * @param real_message_size -= the total size of the preimage\n * @return finalized sha256 hash\n */\npub fn partial_sha256_var_end<let N: u32>(mut h: [u32; 8], msg: [u8; N], message_size: u64, real_message_size: u64) -> [u8; 32] {\n    let message_size = message_size as u32; // noir stdlib uses u64\n    let real_message_size = real_message_size as u32; // noir stdlib uses u64\n\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !is_unconstrained() {\n        for i in 0..64 {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..64 {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, real_message_size)\n    };\n\n    if !is_unconstrained() {\n        for i in 0..56 {\n            if i < msg_byte_ptr {\n                assert_eq(msg_block[i], last_block[i]);\n            } else {\n                assert_eq(msg_block[i], zero);\n            }\n        }\n\n        let len = 8 * real_message_size;\n        let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n        for i in 56..64 {\n            assert_eq(msg_block[i], len_bytes[i - 56]);\n        }\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; BLOCK_SIZE],\n    mut msg_byte_ptr: u32\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; BLOCK_SIZE], mut msg_byte_ptr: u32, message_size: u32) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nglobal DATA: [u8; 192] = [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n    25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n    48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n    71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n    94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n    113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n    131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n    149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166,\n    167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,\n    185, 186, 187, 188, 189, 190, 191\n];\n\n#[test]\nfn test_partial_hash() {\n    let mut data0 = [0; 128];\n    for i in 0..data0.len() {\n        data0[i] = DATA[i];\n    }\n    let mut data1 = [0; 64];\n    for i in 0..data1.len() {\n        data1[i] = DATA[data0.len() + i];\n    }\n    let state = partial_sha256_var_start(data0);\n    let hash = partial_sha256_var_end(state, data1, data1.len() as u64, DATA.len() as u64);\n    let correct_hash = std::hash::sha256_var(DATA, DATA.len() as u64);\n    assert_eq(hash, correct_hash);\n}\n\n#[test]\nfn test_partial_hash_interstitial() {\n    let mut data0 = [0; 64];\n    let mut data1 = [0; 64];\n    let mut data2 = [0; 64];\n    for i in 0..data0.len() {\n        data0[i] = DATA[i];\n        data1[i] = DATA[64 + i];\n        data2[i] = DATA[128 + i];\n    }\n    let pre_hash = partial_sha256_var_start(data0);\n    let interstitial_hash = partial_sha256_var_interstitial(pre_hash, data1, data1.len());\n    let hash = partial_sha256_var_end(interstitial_hash, data2, data2.len() as u64, DATA.len() as u64);\n    let correct_hash = std::hash::sha256_var(DATA, DATA.len() as u64);\n    assert_eq(hash, correct_hash);\n}\n\n#[test]\nfn test_partial_hash_interstitial_var() {\n    let mut data0 = [0; 64];\n    let mut data1 = [0; 128]; // second block not used\n    let mut data2 = [0; 64];\n    for i in 0..data0.len() {\n        data0[i] = DATA[i];\n        data1[i] = DATA[64 + i];\n        data2[i] = DATA[128 + i];\n    }\n    let pre_hash = partial_sha256_var_start(data0);\n    let interstitial_hash = partial_sha256_var_interstitial(pre_hash, data1, 64);\n    let hash = partial_sha256_var_end(interstitial_hash, data2, data2.len() as u64, DATA.len() as u64);\n    let correct_hash = std::hash::sha256_var(DATA, DATA.len() as u64);\n    assert_eq(hash, correct_hash);\n}\n","path":"/Users/saleel/nargo/github.com/zkemail/zkemail.nrupdate-deps/lib/src/partial_hash.nr"}},"names":["main"],"brillig_names":["build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","split_60_bits","__mul","__compute_quadratic_expression_with_borrow_flags","search","get_lt_predicate_f","directive_integer_quotient","directive_invert"]}